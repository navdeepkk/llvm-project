; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@__wg_main_kernel_0 = internal addrspace(3) global [1024 x half] undef
@__wg_main_kernel_1 = internal addrspace(3) global [1024 x half] undef
@__wg_main_kernel_2 = internal addrspace(3) global [8 x <2 x half>] undef

declare i8* @malloc(i64 %0)

declare void @free(i8* %0)

define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %24, i64 %4, 3, 1
  %26 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %25, i64 %6, 4, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %28 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %27, i32* %8, 1
  %29 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %28, i64 %9, 2
  %30 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %29, i64 %10, 3, 0
  %31 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %30, i64 %11, 4, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %33 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %32, half* %13, 1
  %34 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %33, i64 %14, 2
  %35 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %34, i64 %15, 3, 0
  %36 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %35, i64 %17, 4, 0
  %37 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %36, i64 %16, 3, 1
  %38 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %37, i64 %18, 4, 1
  %39 = alloca <16 x half>, i64 1, align 32
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %39, 0
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, <16 x half>* %39, 1
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 0, 2
  %43 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %42, i64 1, 3, 0
  %44 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %43, i64 1, 4, 0
  %45 = alloca <16 x half>, i64 1, align 32
  %46 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %45, 0
  %47 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %46, <16 x half>* %45, 1
  %48 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %47, i64 0, 2
  %49 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %48, i64 1, 3, 0
  %50 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %49, i64 1, 4, 0
  %51 = alloca <8 x half>, i64 1, align 16
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %51, 0
  %53 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %52, <8 x half>* %51, 1
  %54 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 0, 2
  %55 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 3, 0
  %56 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 1, 4, 0
  %57 = alloca <8 x half>, i64 1, align 16
  %58 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %57, 0
  %59 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %58, <8 x half>* %57, 1
  %60 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca i32, i64 12, align 4
  %64 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %63, 0
  %65 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %64, i32* %63, 1
  %66 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %65, i64 0, 2
  %67 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %66, i64 2, 3, 0
  %68 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %67, i64 6, 4, 0
  %69 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %68, i64 6, 3, 1
  %70 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %69, i64 1, 4, 1
  br label %71

71:                                               ; preds = %19
  %72 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %73 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %74 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %75 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %76 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = getelementptr <16 x half>, <16 x half>* %73, i64 0
  %79 = bitcast <16 x half>* %78 to i32*
  %80 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %81 = bitcast <2 x half> %80 to i32
  %82 = getelementptr i32, i32* %79, i32 0
  store i32 %81, i32* %82, align 4
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %84 = bitcast <2 x half> %83 to i32
  %85 = getelementptr i32, i32* %79, i32 1
  store i32 %84, i32* %85, align 4
  %86 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %87 = bitcast <2 x half> %86 to i32
  %88 = getelementptr i32, i32* %79, i32 2
  store i32 %87, i32* %88, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %79, i32 3
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %79, i32 4
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %79, i32 5
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %79, i32 6
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %79, i32 7
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %105 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %106 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %107 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %108 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %109 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %110 = getelementptr <16 x half>, <16 x half>* %105, i64 0
  %111 = bitcast <16 x half>* %110 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %111, i32 0
  store i32 %113, i32* %114, align 4
  %115 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 1
  %116 = bitcast <2 x half> %115 to i32
  %117 = getelementptr i32, i32* %111, i32 1
  store i32 %116, i32* %117, align 4
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 2
  %119 = bitcast <2 x half> %118 to i32
  %120 = getelementptr i32, i32* %111, i32 2
  store i32 %119, i32* %120, align 4
  %121 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 3
  %122 = bitcast <2 x half> %121 to i32
  %123 = getelementptr i32, i32* %111, i32 3
  store i32 %122, i32* %123, align 4
  %124 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 4
  %125 = bitcast <2 x half> %124 to i32
  %126 = getelementptr i32, i32* %111, i32 4
  store i32 %125, i32* %126, align 4
  %127 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 5
  %128 = bitcast <2 x half> %127 to i32
  %129 = getelementptr i32, i32* %111, i32 5
  store i32 %128, i32* %129, align 4
  %130 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 6
  %131 = bitcast <2 x half> %130 to i32
  %132 = getelementptr i32, i32* %111, i32 6
  store i32 %131, i32* %132, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 7
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %111, i32 7
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %137 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %138 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %139 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %140 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %141 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %142 = getelementptr <8 x half>, <8 x half>* %137, i64 0
  %143 = bitcast <8 x half>* %142 to i32*
  %144 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 0
  %145 = bitcast <2 x half> %144 to i32
  %146 = getelementptr i32, i32* %143, i32 0
  store i32 %145, i32* %146, align 4
  %147 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 1
  %148 = bitcast <2 x half> %147 to i32
  %149 = getelementptr i32, i32* %143, i32 1
  store i32 %148, i32* %149, align 4
  %150 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 2
  %151 = bitcast <2 x half> %150 to i32
  %152 = getelementptr i32, i32* %143, i32 2
  store i32 %151, i32* %152, align 4
  %153 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 3
  %154 = bitcast <2 x half> %153 to i32
  %155 = getelementptr i32, i32* %143, i32 3
  store i32 %154, i32* %155, align 4
  %156 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %157 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %158 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %159 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %160 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %161 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %162 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %163 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %164 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %165 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %166 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %167 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %168 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %169 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %170 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %171 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %172 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %173 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %174 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %175 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %176 = getelementptr <16 x half>, <16 x half>* %157, i64 0
  %177 = bitcast <16 x half>* %176 to i32*
  %178 = getelementptr i32, i32* %177, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = bitcast i32 %179 to <2 x half>
  %181 = getelementptr i32, i32* %177, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = bitcast i32 %182 to <2 x half>
  %184 = getelementptr i32, i32* %177, i32 2
  %185 = load i32, i32* %184, align 4
  %186 = bitcast i32 %185 to <2 x half>
  %187 = getelementptr i32, i32* %177, i32 3
  %188 = load i32, i32* %187, align 4
  %189 = bitcast i32 %188 to <2 x half>
  %190 = getelementptr i32, i32* %177, i32 4
  %191 = load i32, i32* %190, align 4
  %192 = bitcast i32 %191 to <2 x half>
  %193 = getelementptr i32, i32* %177, i32 5
  %194 = load i32, i32* %193, align 4
  %195 = bitcast i32 %194 to <2 x half>
  %196 = getelementptr i32, i32* %177, i32 6
  %197 = load i32, i32* %196, align 4
  %198 = bitcast i32 %197 to <2 x half>
  %199 = getelementptr i32, i32* %177, i32 7
  %200 = load i32, i32* %199, align 4
  %201 = bitcast i32 %200 to <2 x half>
  %202 = getelementptr <16 x half>, <16 x half>* %162, i64 0
  %203 = bitcast <16 x half>* %202 to i32*
  %204 = getelementptr i32, i32* %203, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = bitcast i32 %205 to <2 x half>
  %207 = getelementptr i32, i32* %203, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = bitcast i32 %208 to <2 x half>
  %210 = getelementptr i32, i32* %203, i32 2
  %211 = load i32, i32* %210, align 4
  %212 = bitcast i32 %211 to <2 x half>
  %213 = getelementptr i32, i32* %203, i32 3
  %214 = load i32, i32* %213, align 4
  %215 = bitcast i32 %214 to <2 x half>
  %216 = getelementptr i32, i32* %203, i32 4
  %217 = load i32, i32* %216, align 4
  %218 = bitcast i32 %217 to <2 x half>
  %219 = getelementptr i32, i32* %203, i32 5
  %220 = load i32, i32* %219, align 4
  %221 = bitcast i32 %220 to <2 x half>
  %222 = getelementptr i32, i32* %203, i32 6
  %223 = load i32, i32* %222, align 4
  %224 = bitcast i32 %223 to <2 x half>
  %225 = getelementptr i32, i32* %203, i32 7
  %226 = load i32, i32* %225, align 4
  %227 = bitcast i32 %226 to <2 x half>
  %228 = getelementptr <8 x half>, <8 x half>* %167, i64 0
  %229 = bitcast <8 x half>* %228 to i32*
  %230 = getelementptr i32, i32* %229, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = bitcast i32 %231 to <2 x half>
  %233 = getelementptr i32, i32* %229, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = bitcast i32 %234 to <2 x half>
  %236 = getelementptr i32, i32* %229, i32 2
  %237 = load i32, i32* %236, align 4
  %238 = bitcast i32 %237 to <2 x half>
  %239 = getelementptr i32, i32* %229, i32 3
  %240 = load i32, i32* %239, align 4
  %241 = bitcast i32 %240 to <2 x half>
  %242 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %180, <2 x half> %183, <2 x half> %186, <2 x half> %189, <2 x half> %192, <2 x half> %195, <2 x half> %198, <2 x half> %201, <2 x half> %206, <2 x half> %209, <2 x half> %212, <2 x half> %215, <2 x half> %218, <2 x half> %221, <2 x half> %224, <2 x half> %227, <2 x half> %232, <2 x half> %235, <2 x half> %238, <2 x half> %241)
  %243 = getelementptr <8 x half>, <8 x half>* %172, i64 0
  %244 = bitcast <8 x half>* %243 to i32*
  %245 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 0
  %246 = bitcast <2 x half> %245 to i32
  %247 = getelementptr i32, i32* %244, i32 0
  store i32 %246, i32* %247, align 4
  %248 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 1
  %249 = bitcast <2 x half> %248 to i32
  %250 = getelementptr i32, i32* %244, i32 1
  store i32 %249, i32* %250, align 4
  %251 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 2
  %252 = bitcast <2 x half> %251 to i32
  %253 = getelementptr i32, i32* %244, i32 2
  store i32 %252, i32* %253, align 4
  %254 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 3
  %255 = bitcast <2 x half> %254 to i32
  %256 = getelementptr i32, i32* %244, i32 3
  store i32 %255, i32* %256, align 4
  %257 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %258 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %259 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %260 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %261 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %262 = getelementptr <8 x half>, <8 x half>* %258, i64 0
  %263 = bitcast <8 x half>* %262 to i32*
  %264 = getelementptr i32, i32* %263, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = bitcast i32 %265 to <2 x half>
  %267 = getelementptr i32, i32* %263, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = bitcast i32 %268 to <2 x half>
  %270 = getelementptr i32, i32* %263, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = bitcast i32 %271 to <2 x half>
  %273 = getelementptr i32, i32* %263, i32 3
  %274 = load i32, i32* %273, align 4
  %275 = bitcast i32 %274 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %266, <2 x half> %269, <2 x half> %272, <2 x half> %275, i32 32)
  ret void
}

; Function Attrs: argmemonly nounwind readonly
declare { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* nocapture readonly %0, i32 %1) #0

; Function Attrs: argmemonly nounwind readonly
declare { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* nocapture readonly %0, i32 %1) #0

; Function Attrs: argmemonly nounwind readonly
declare { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* nocapture readonly %0, i32 %1) #0

; Function Attrs: nounwind readnone
declare { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %0, <2 x half> %1, <2 x half> %2, <2 x half> %3, <2 x half> %4, <2 x half> %5, <2 x half> %6, <2 x half> %7, <2 x half> %8, <2 x half> %9, <2 x half> %10, <2 x half> %11, <2 x half> %12, <2 x half> %13, <2 x half> %14, <2 x half> %15, <2 x half> %16, <2 x half> %17, <2 x half> %18, <2 x half> %19) #1

; Function Attrs: argmemonly nounwind writeonly
declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* nocapture writeonly %0, <2 x half> %1, <2 x half> %2, <2 x half> %3, <2 x half> %4, i32 %5) #2

attributes #0 = { argmemonly nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { argmemonly nounwind writeonly }

!nvvm.annotations = !{!0}

!0 = !{void (i32*, i32*, i64, i64, i64, i64, i64, i32*, i32*, i64, i64, i64, half*, half*, i64, i64, i64, i64, i64)* @main_kernel, !"kernel", i32 1}
Replace occurrences of __nvvm_reflect() calls with 0/1
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %24, i64 %4, 3, 1
  %26 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %25, i64 %6, 4, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %28 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %27, i32* %8, 1
  %29 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %28, i64 %9, 2
  %30 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %29, i64 %10, 3, 0
  %31 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %30, i64 %11, 4, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %33 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %32, half* %13, 1
  %34 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %33, i64 %14, 2
  %35 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %34, i64 %15, 3, 0
  %36 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %35, i64 %17, 4, 0
  %37 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %36, i64 %16, 3, 1
  %38 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %37, i64 %18, 4, 1
  %39 = alloca <16 x half>, i64 1, align 32
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %39, 0
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, <16 x half>* %39, 1
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 0, 2
  %43 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %42, i64 1, 3, 0
  %44 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %43, i64 1, 4, 0
  %45 = alloca <16 x half>, i64 1, align 32
  %46 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %45, 0
  %47 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %46, <16 x half>* %45, 1
  %48 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %47, i64 0, 2
  %49 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %48, i64 1, 3, 0
  %50 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %49, i64 1, 4, 0
  %51 = alloca <8 x half>, i64 1, align 16
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %51, 0
  %53 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %52, <8 x half>* %51, 1
  %54 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 0, 2
  %55 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 3, 0
  %56 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 1, 4, 0
  %57 = alloca <8 x half>, i64 1, align 16
  %58 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %57, 0
  %59 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %58, <8 x half>* %57, 1
  %60 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca i32, i64 12, align 4
  %64 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %63, 0
  %65 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %64, i32* %63, 1
  %66 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %65, i64 0, 2
  %67 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %66, i64 2, 3, 0
  %68 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %67, i64 6, 4, 0
  %69 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %68, i64 6, 3, 1
  %70 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %69, i64 1, 4, 1
  br label %71

71:                                               ; preds = %19
  %72 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %73 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %74 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %75 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %76 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = getelementptr <16 x half>, <16 x half>* %73, i64 0
  %79 = bitcast <16 x half>* %78 to i32*
  %80 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %81 = bitcast <2 x half> %80 to i32
  %82 = getelementptr i32, i32* %79, i32 0
  store i32 %81, i32* %82, align 4
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %84 = bitcast <2 x half> %83 to i32
  %85 = getelementptr i32, i32* %79, i32 1
  store i32 %84, i32* %85, align 4
  %86 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %87 = bitcast <2 x half> %86 to i32
  %88 = getelementptr i32, i32* %79, i32 2
  store i32 %87, i32* %88, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %79, i32 3
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %79, i32 4
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %79, i32 5
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %79, i32 6
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %79, i32 7
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %105 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %106 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %107 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %108 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %109 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %110 = getelementptr <16 x half>, <16 x half>* %105, i64 0
  %111 = bitcast <16 x half>* %110 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %111, i32 0
  store i32 %113, i32* %114, align 4
  %115 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 1
  %116 = bitcast <2 x half> %115 to i32
  %117 = getelementptr i32, i32* %111, i32 1
  store i32 %116, i32* %117, align 4
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 2
  %119 = bitcast <2 x half> %118 to i32
  %120 = getelementptr i32, i32* %111, i32 2
  store i32 %119, i32* %120, align 4
  %121 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 3
  %122 = bitcast <2 x half> %121 to i32
  %123 = getelementptr i32, i32* %111, i32 3
  store i32 %122, i32* %123, align 4
  %124 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 4
  %125 = bitcast <2 x half> %124 to i32
  %126 = getelementptr i32, i32* %111, i32 4
  store i32 %125, i32* %126, align 4
  %127 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 5
  %128 = bitcast <2 x half> %127 to i32
  %129 = getelementptr i32, i32* %111, i32 5
  store i32 %128, i32* %129, align 4
  %130 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 6
  %131 = bitcast <2 x half> %130 to i32
  %132 = getelementptr i32, i32* %111, i32 6
  store i32 %131, i32* %132, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 7
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %111, i32 7
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %137 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %138 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %139 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %140 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %141 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %142 = getelementptr <8 x half>, <8 x half>* %137, i64 0
  %143 = bitcast <8 x half>* %142 to i32*
  %144 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 0
  %145 = bitcast <2 x half> %144 to i32
  %146 = getelementptr i32, i32* %143, i32 0
  store i32 %145, i32* %146, align 4
  %147 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 1
  %148 = bitcast <2 x half> %147 to i32
  %149 = getelementptr i32, i32* %143, i32 1
  store i32 %148, i32* %149, align 4
  %150 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 2
  %151 = bitcast <2 x half> %150 to i32
  %152 = getelementptr i32, i32* %143, i32 2
  store i32 %151, i32* %152, align 4
  %153 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 3
  %154 = bitcast <2 x half> %153 to i32
  %155 = getelementptr i32, i32* %143, i32 3
  store i32 %154, i32* %155, align 4
  %156 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %157 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %158 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %159 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %160 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %161 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %162 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %163 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %164 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %165 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %166 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %167 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %168 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %169 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %170 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %171 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %172 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %173 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %174 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %175 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %176 = getelementptr <16 x half>, <16 x half>* %157, i64 0
  %177 = bitcast <16 x half>* %176 to i32*
  %178 = getelementptr i32, i32* %177, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = bitcast i32 %179 to <2 x half>
  %181 = getelementptr i32, i32* %177, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = bitcast i32 %182 to <2 x half>
  %184 = getelementptr i32, i32* %177, i32 2
  %185 = load i32, i32* %184, align 4
  %186 = bitcast i32 %185 to <2 x half>
  %187 = getelementptr i32, i32* %177, i32 3
  %188 = load i32, i32* %187, align 4
  %189 = bitcast i32 %188 to <2 x half>
  %190 = getelementptr i32, i32* %177, i32 4
  %191 = load i32, i32* %190, align 4
  %192 = bitcast i32 %191 to <2 x half>
  %193 = getelementptr i32, i32* %177, i32 5
  %194 = load i32, i32* %193, align 4
  %195 = bitcast i32 %194 to <2 x half>
  %196 = getelementptr i32, i32* %177, i32 6
  %197 = load i32, i32* %196, align 4
  %198 = bitcast i32 %197 to <2 x half>
  %199 = getelementptr i32, i32* %177, i32 7
  %200 = load i32, i32* %199, align 4
  %201 = bitcast i32 %200 to <2 x half>
  %202 = getelementptr <16 x half>, <16 x half>* %162, i64 0
  %203 = bitcast <16 x half>* %202 to i32*
  %204 = getelementptr i32, i32* %203, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = bitcast i32 %205 to <2 x half>
  %207 = getelementptr i32, i32* %203, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = bitcast i32 %208 to <2 x half>
  %210 = getelementptr i32, i32* %203, i32 2
  %211 = load i32, i32* %210, align 4
  %212 = bitcast i32 %211 to <2 x half>
  %213 = getelementptr i32, i32* %203, i32 3
  %214 = load i32, i32* %213, align 4
  %215 = bitcast i32 %214 to <2 x half>
  %216 = getelementptr i32, i32* %203, i32 4
  %217 = load i32, i32* %216, align 4
  %218 = bitcast i32 %217 to <2 x half>
  %219 = getelementptr i32, i32* %203, i32 5
  %220 = load i32, i32* %219, align 4
  %221 = bitcast i32 %220 to <2 x half>
  %222 = getelementptr i32, i32* %203, i32 6
  %223 = load i32, i32* %222, align 4
  %224 = bitcast i32 %223 to <2 x half>
  %225 = getelementptr i32, i32* %203, i32 7
  %226 = load i32, i32* %225, align 4
  %227 = bitcast i32 %226 to <2 x half>
  %228 = getelementptr <8 x half>, <8 x half>* %167, i64 0
  %229 = bitcast <8 x half>* %228 to i32*
  %230 = getelementptr i32, i32* %229, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = bitcast i32 %231 to <2 x half>
  %233 = getelementptr i32, i32* %229, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = bitcast i32 %234 to <2 x half>
  %236 = getelementptr i32, i32* %229, i32 2
  %237 = load i32, i32* %236, align 4
  %238 = bitcast i32 %237 to <2 x half>
  %239 = getelementptr i32, i32* %229, i32 3
  %240 = load i32, i32* %239, align 4
  %241 = bitcast i32 %240 to <2 x half>
  %242 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %180, <2 x half> %183, <2 x half> %186, <2 x half> %189, <2 x half> %192, <2 x half> %195, <2 x half> %198, <2 x half> %201, <2 x half> %206, <2 x half> %209, <2 x half> %212, <2 x half> %215, <2 x half> %218, <2 x half> %221, <2 x half> %224, <2 x half> %227, <2 x half> %232, <2 x half> %235, <2 x half> %238, <2 x half> %241)
  %243 = getelementptr <8 x half>, <8 x half>* %172, i64 0
  %244 = bitcast <8 x half>* %243 to i32*
  %245 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 0
  %246 = bitcast <2 x half> %245 to i32
  %247 = getelementptr i32, i32* %244, i32 0
  store i32 %246, i32* %247, align 4
  %248 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 1
  %249 = bitcast <2 x half> %248 to i32
  %250 = getelementptr i32, i32* %244, i32 1
  store i32 %249, i32* %250, align 4
  %251 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 2
  %252 = bitcast <2 x half> %251 to i32
  %253 = getelementptr i32, i32* %244, i32 2
  store i32 %252, i32* %253, align 4
  %254 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 3
  %255 = bitcast <2 x half> %254 to i32
  %256 = getelementptr i32, i32* %244, i32 3
  store i32 %255, i32* %256, align 4
  %257 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %258 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %259 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %260 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %261 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %262 = getelementptr <8 x half>, <8 x half>* %258, i64 0
  %263 = bitcast <8 x half>* %262 to i32*
  %264 = getelementptr i32, i32* %263, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = bitcast i32 %265 to <2 x half>
  %267 = getelementptr i32, i32* %263, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = bitcast i32 %268 to <2 x half>
  %270 = getelementptr i32, i32* %263, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = bitcast i32 %271 to <2 x half>
  %273 = getelementptr i32, i32* %263, i32 3
  %274 = load i32, i32* %273, align 4
  %275 = bitcast i32 %274 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %266, <2 x half> %269, <2 x half> %272, <2 x half> %275, i32 32)
  ret void
}

-----------------------------------------------------------
Unnamed pass: implement Pass::getPassName()
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %24, i64 %4, 3, 1
  %26 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %25, i64 %6, 4, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %28 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %27, i32* %8, 1
  %29 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %28, i64 %9, 2
  %30 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %29, i64 %10, 3, 0
  %31 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %30, i64 %11, 4, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %33 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %32, half* %13, 1
  %34 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %33, i64 %14, 2
  %35 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %34, i64 %15, 3, 0
  %36 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %35, i64 %17, 4, 0
  %37 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %36, i64 %16, 3, 1
  %38 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %37, i64 %18, 4, 1
  %39 = alloca <16 x half>, i64 1, align 32
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %39, 0
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, <16 x half>* %39, 1
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 0, 2
  %43 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %42, i64 1, 3, 0
  %44 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %43, i64 1, 4, 0
  %45 = alloca <16 x half>, i64 1, align 32
  %46 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %45, 0
  %47 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %46, <16 x half>* %45, 1
  %48 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %47, i64 0, 2
  %49 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %48, i64 1, 3, 0
  %50 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %49, i64 1, 4, 0
  %51 = alloca <8 x half>, i64 1, align 16
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %51, 0
  %53 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %52, <8 x half>* %51, 1
  %54 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 0, 2
  %55 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 3, 0
  %56 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 1, 4, 0
  %57 = alloca <8 x half>, i64 1, align 16
  %58 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %57, 0
  %59 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %58, <8 x half>* %57, 1
  %60 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca i32, i64 12, align 4
  %64 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %63, 0
  %65 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %64, i32* %63, 1
  %66 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %65, i64 0, 2
  %67 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %66, i64 2, 3, 0
  %68 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %67, i64 6, 4, 0
  %69 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %68, i64 6, 3, 1
  %70 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %69, i64 1, 4, 1
  br label %71

71:                                               ; preds = %19
  %72 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %73 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %74 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %75 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %76 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = getelementptr <16 x half>, <16 x half>* %73, i64 0
  %79 = bitcast <16 x half>* %78 to i32*
  %80 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %81 = bitcast <2 x half> %80 to i32
  %82 = getelementptr i32, i32* %79, i32 0
  store i32 %81, i32* %82, align 4
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %84 = bitcast <2 x half> %83 to i32
  %85 = getelementptr i32, i32* %79, i32 1
  store i32 %84, i32* %85, align 4
  %86 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %87 = bitcast <2 x half> %86 to i32
  %88 = getelementptr i32, i32* %79, i32 2
  store i32 %87, i32* %88, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %79, i32 3
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %79, i32 4
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %79, i32 5
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %79, i32 6
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %79, i32 7
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %105 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %106 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %107 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %108 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %109 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %110 = getelementptr <16 x half>, <16 x half>* %105, i64 0
  %111 = bitcast <16 x half>* %110 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %111, i32 0
  store i32 %113, i32* %114, align 4
  %115 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 1
  %116 = bitcast <2 x half> %115 to i32
  %117 = getelementptr i32, i32* %111, i32 1
  store i32 %116, i32* %117, align 4
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 2
  %119 = bitcast <2 x half> %118 to i32
  %120 = getelementptr i32, i32* %111, i32 2
  store i32 %119, i32* %120, align 4
  %121 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 3
  %122 = bitcast <2 x half> %121 to i32
  %123 = getelementptr i32, i32* %111, i32 3
  store i32 %122, i32* %123, align 4
  %124 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 4
  %125 = bitcast <2 x half> %124 to i32
  %126 = getelementptr i32, i32* %111, i32 4
  store i32 %125, i32* %126, align 4
  %127 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 5
  %128 = bitcast <2 x half> %127 to i32
  %129 = getelementptr i32, i32* %111, i32 5
  store i32 %128, i32* %129, align 4
  %130 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 6
  %131 = bitcast <2 x half> %130 to i32
  %132 = getelementptr i32, i32* %111, i32 6
  store i32 %131, i32* %132, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 7
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %111, i32 7
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %137 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %138 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %139 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %140 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %141 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %142 = getelementptr <8 x half>, <8 x half>* %137, i64 0
  %143 = bitcast <8 x half>* %142 to i32*
  %144 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 0
  %145 = bitcast <2 x half> %144 to i32
  %146 = getelementptr i32, i32* %143, i32 0
  store i32 %145, i32* %146, align 4
  %147 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 1
  %148 = bitcast <2 x half> %147 to i32
  %149 = getelementptr i32, i32* %143, i32 1
  store i32 %148, i32* %149, align 4
  %150 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 2
  %151 = bitcast <2 x half> %150 to i32
  %152 = getelementptr i32, i32* %143, i32 2
  store i32 %151, i32* %152, align 4
  %153 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 3
  %154 = bitcast <2 x half> %153 to i32
  %155 = getelementptr i32, i32* %143, i32 3
  store i32 %154, i32* %155, align 4
  %156 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %157 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %158 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %159 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %160 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %161 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %162 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %163 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %164 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %165 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %166 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %167 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %168 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %169 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %170 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %171 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %172 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %173 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %174 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %175 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %176 = getelementptr <16 x half>, <16 x half>* %157, i64 0
  %177 = bitcast <16 x half>* %176 to i32*
  %178 = getelementptr i32, i32* %177, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = bitcast i32 %179 to <2 x half>
  %181 = getelementptr i32, i32* %177, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = bitcast i32 %182 to <2 x half>
  %184 = getelementptr i32, i32* %177, i32 2
  %185 = load i32, i32* %184, align 4
  %186 = bitcast i32 %185 to <2 x half>
  %187 = getelementptr i32, i32* %177, i32 3
  %188 = load i32, i32* %187, align 4
  %189 = bitcast i32 %188 to <2 x half>
  %190 = getelementptr i32, i32* %177, i32 4
  %191 = load i32, i32* %190, align 4
  %192 = bitcast i32 %191 to <2 x half>
  %193 = getelementptr i32, i32* %177, i32 5
  %194 = load i32, i32* %193, align 4
  %195 = bitcast i32 %194 to <2 x half>
  %196 = getelementptr i32, i32* %177, i32 6
  %197 = load i32, i32* %196, align 4
  %198 = bitcast i32 %197 to <2 x half>
  %199 = getelementptr i32, i32* %177, i32 7
  %200 = load i32, i32* %199, align 4
  %201 = bitcast i32 %200 to <2 x half>
  %202 = getelementptr <16 x half>, <16 x half>* %162, i64 0
  %203 = bitcast <16 x half>* %202 to i32*
  %204 = getelementptr i32, i32* %203, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = bitcast i32 %205 to <2 x half>
  %207 = getelementptr i32, i32* %203, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = bitcast i32 %208 to <2 x half>
  %210 = getelementptr i32, i32* %203, i32 2
  %211 = load i32, i32* %210, align 4
  %212 = bitcast i32 %211 to <2 x half>
  %213 = getelementptr i32, i32* %203, i32 3
  %214 = load i32, i32* %213, align 4
  %215 = bitcast i32 %214 to <2 x half>
  %216 = getelementptr i32, i32* %203, i32 4
  %217 = load i32, i32* %216, align 4
  %218 = bitcast i32 %217 to <2 x half>
  %219 = getelementptr i32, i32* %203, i32 5
  %220 = load i32, i32* %219, align 4
  %221 = bitcast i32 %220 to <2 x half>
  %222 = getelementptr i32, i32* %203, i32 6
  %223 = load i32, i32* %222, align 4
  %224 = bitcast i32 %223 to <2 x half>
  %225 = getelementptr i32, i32* %203, i32 7
  %226 = load i32, i32* %225, align 4
  %227 = bitcast i32 %226 to <2 x half>
  %228 = getelementptr <8 x half>, <8 x half>* %167, i64 0
  %229 = bitcast <8 x half>* %228 to i32*
  %230 = getelementptr i32, i32* %229, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = bitcast i32 %231 to <2 x half>
  %233 = getelementptr i32, i32* %229, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = bitcast i32 %234 to <2 x half>
  %236 = getelementptr i32, i32* %229, i32 2
  %237 = load i32, i32* %236, align 4
  %238 = bitcast i32 %237 to <2 x half>
  %239 = getelementptr i32, i32* %229, i32 3
  %240 = load i32, i32* %239, align 4
  %241 = bitcast i32 %240 to <2 x half>
  %242 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %180, <2 x half> %183, <2 x half> %186, <2 x half> %189, <2 x half> %192, <2 x half> %195, <2 x half> %198, <2 x half> %201, <2 x half> %206, <2 x half> %209, <2 x half> %212, <2 x half> %215, <2 x half> %218, <2 x half> %221, <2 x half> %224, <2 x half> %227, <2 x half> %232, <2 x half> %235, <2 x half> %238, <2 x half> %241)
  %243 = getelementptr <8 x half>, <8 x half>* %172, i64 0
  %244 = bitcast <8 x half>* %243 to i32*
  %245 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 0
  %246 = bitcast <2 x half> %245 to i32
  %247 = getelementptr i32, i32* %244, i32 0
  store i32 %246, i32* %247, align 4
  %248 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 1
  %249 = bitcast <2 x half> %248 to i32
  %250 = getelementptr i32, i32* %244, i32 1
  store i32 %249, i32* %250, align 4
  %251 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 2
  %252 = bitcast <2 x half> %251 to i32
  %253 = getelementptr i32, i32* %244, i32 2
  store i32 %252, i32* %253, align 4
  %254 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 3
  %255 = bitcast <2 x half> %254 to i32
  %256 = getelementptr i32, i32* %244, i32 3
  store i32 %255, i32* %256, align 4
  %257 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %258 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %259 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %260 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %261 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %262 = getelementptr <8 x half>, <8 x half>* %258, i64 0
  %263 = bitcast <8 x half>* %262 to i32*
  %264 = getelementptr i32, i32* %263, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = bitcast i32 %265 to <2 x half>
  %267 = getelementptr i32, i32* %263, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = bitcast i32 %268 to <2 x half>
  %270 = getelementptr i32, i32* %263, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = bitcast i32 %271 to <2 x half>
  %273 = getelementptr i32, i32* %263, i32 3
  %274 = load i32, i32* %273, align 4
  %275 = bitcast i32 %274 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %266, <2 x half> %269, <2 x half> %272, <2 x half> %275, i32 32)
  ret void
}

-----------------------------------------------------------
Lower pointer arguments of CUDA kernels
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %24, i64 %4, 3, 1
  %26 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %25, i64 %6, 4, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %28 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %27, i32* %8, 1
  %29 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %28, i64 %9, 2
  %30 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %29, i64 %10, 3, 0
  %31 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %30, i64 %11, 4, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %33 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %32, half* %13, 1
  %34 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %33, i64 %14, 2
  %35 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %34, i64 %15, 3, 0
  %36 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %35, i64 %17, 4, 0
  %37 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %36, i64 %16, 3, 1
  %38 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %37, i64 %18, 4, 1
  %39 = alloca <16 x half>, i64 1, align 32
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %39, 0
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, <16 x half>* %39, 1
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 0, 2
  %43 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %42, i64 1, 3, 0
  %44 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %43, i64 1, 4, 0
  %45 = alloca <16 x half>, i64 1, align 32
  %46 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %45, 0
  %47 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %46, <16 x half>* %45, 1
  %48 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %47, i64 0, 2
  %49 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %48, i64 1, 3, 0
  %50 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %49, i64 1, 4, 0
  %51 = alloca <8 x half>, i64 1, align 16
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %51, 0
  %53 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %52, <8 x half>* %51, 1
  %54 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 0, 2
  %55 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 3, 0
  %56 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 1, 4, 0
  %57 = alloca <8 x half>, i64 1, align 16
  %58 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %57, 0
  %59 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %58, <8 x half>* %57, 1
  %60 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca i32, i64 12, align 4
  %64 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %63, 0
  %65 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %64, i32* %63, 1
  %66 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %65, i64 0, 2
  %67 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %66, i64 2, 3, 0
  %68 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %67, i64 6, 4, 0
  %69 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %68, i64 6, 3, 1
  %70 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %69, i64 1, 4, 1
  br label %71

71:                                               ; preds = %19
  %72 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %73 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %74 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %75 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %76 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = getelementptr <16 x half>, <16 x half>* %73, i64 0
  %79 = bitcast <16 x half>* %78 to i32*
  %80 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %81 = bitcast <2 x half> %80 to i32
  %82 = getelementptr i32, i32* %79, i32 0
  store i32 %81, i32* %82, align 4
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %84 = bitcast <2 x half> %83 to i32
  %85 = getelementptr i32, i32* %79, i32 1
  store i32 %84, i32* %85, align 4
  %86 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %87 = bitcast <2 x half> %86 to i32
  %88 = getelementptr i32, i32* %79, i32 2
  store i32 %87, i32* %88, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %79, i32 3
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %79, i32 4
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %79, i32 5
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %79, i32 6
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %79, i32 7
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %105 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %106 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %107 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %108 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %109 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %110 = getelementptr <16 x half>, <16 x half>* %105, i64 0
  %111 = bitcast <16 x half>* %110 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %111, i32 0
  store i32 %113, i32* %114, align 4
  %115 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 1
  %116 = bitcast <2 x half> %115 to i32
  %117 = getelementptr i32, i32* %111, i32 1
  store i32 %116, i32* %117, align 4
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 2
  %119 = bitcast <2 x half> %118 to i32
  %120 = getelementptr i32, i32* %111, i32 2
  store i32 %119, i32* %120, align 4
  %121 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 3
  %122 = bitcast <2 x half> %121 to i32
  %123 = getelementptr i32, i32* %111, i32 3
  store i32 %122, i32* %123, align 4
  %124 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 4
  %125 = bitcast <2 x half> %124 to i32
  %126 = getelementptr i32, i32* %111, i32 4
  store i32 %125, i32* %126, align 4
  %127 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 5
  %128 = bitcast <2 x half> %127 to i32
  %129 = getelementptr i32, i32* %111, i32 5
  store i32 %128, i32* %129, align 4
  %130 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 6
  %131 = bitcast <2 x half> %130 to i32
  %132 = getelementptr i32, i32* %111, i32 6
  store i32 %131, i32* %132, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %109, 7
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %111, i32 7
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %137 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %138 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %139 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %140 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %141 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %142 = getelementptr <8 x half>, <8 x half>* %137, i64 0
  %143 = bitcast <8 x half>* %142 to i32*
  %144 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 0
  %145 = bitcast <2 x half> %144 to i32
  %146 = getelementptr i32, i32* %143, i32 0
  store i32 %145, i32* %146, align 4
  %147 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 1
  %148 = bitcast <2 x half> %147 to i32
  %149 = getelementptr i32, i32* %143, i32 1
  store i32 %148, i32* %149, align 4
  %150 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 2
  %151 = bitcast <2 x half> %150 to i32
  %152 = getelementptr i32, i32* %143, i32 2
  store i32 %151, i32* %152, align 4
  %153 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %141, 3
  %154 = bitcast <2 x half> %153 to i32
  %155 = getelementptr i32, i32* %143, i32 3
  store i32 %154, i32* %155, align 4
  %156 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 0
  %157 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 1
  %158 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 2
  %159 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 3, 0
  %160 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, 4, 0
  %161 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 0
  %162 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 1
  %163 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 2
  %164 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 3, 0
  %165 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %50, 4, 0
  %166 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %167 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %168 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %169 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %170 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %171 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %172 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %173 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %174 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %175 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %176 = getelementptr <16 x half>, <16 x half>* %157, i64 0
  %177 = bitcast <16 x half>* %176 to i32*
  %178 = getelementptr i32, i32* %177, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = bitcast i32 %179 to <2 x half>
  %181 = getelementptr i32, i32* %177, i32 1
  %182 = load i32, i32* %181, align 4
  %183 = bitcast i32 %182 to <2 x half>
  %184 = getelementptr i32, i32* %177, i32 2
  %185 = load i32, i32* %184, align 4
  %186 = bitcast i32 %185 to <2 x half>
  %187 = getelementptr i32, i32* %177, i32 3
  %188 = load i32, i32* %187, align 4
  %189 = bitcast i32 %188 to <2 x half>
  %190 = getelementptr i32, i32* %177, i32 4
  %191 = load i32, i32* %190, align 4
  %192 = bitcast i32 %191 to <2 x half>
  %193 = getelementptr i32, i32* %177, i32 5
  %194 = load i32, i32* %193, align 4
  %195 = bitcast i32 %194 to <2 x half>
  %196 = getelementptr i32, i32* %177, i32 6
  %197 = load i32, i32* %196, align 4
  %198 = bitcast i32 %197 to <2 x half>
  %199 = getelementptr i32, i32* %177, i32 7
  %200 = load i32, i32* %199, align 4
  %201 = bitcast i32 %200 to <2 x half>
  %202 = getelementptr <16 x half>, <16 x half>* %162, i64 0
  %203 = bitcast <16 x half>* %202 to i32*
  %204 = getelementptr i32, i32* %203, i32 0
  %205 = load i32, i32* %204, align 4
  %206 = bitcast i32 %205 to <2 x half>
  %207 = getelementptr i32, i32* %203, i32 1
  %208 = load i32, i32* %207, align 4
  %209 = bitcast i32 %208 to <2 x half>
  %210 = getelementptr i32, i32* %203, i32 2
  %211 = load i32, i32* %210, align 4
  %212 = bitcast i32 %211 to <2 x half>
  %213 = getelementptr i32, i32* %203, i32 3
  %214 = load i32, i32* %213, align 4
  %215 = bitcast i32 %214 to <2 x half>
  %216 = getelementptr i32, i32* %203, i32 4
  %217 = load i32, i32* %216, align 4
  %218 = bitcast i32 %217 to <2 x half>
  %219 = getelementptr i32, i32* %203, i32 5
  %220 = load i32, i32* %219, align 4
  %221 = bitcast i32 %220 to <2 x half>
  %222 = getelementptr i32, i32* %203, i32 6
  %223 = load i32, i32* %222, align 4
  %224 = bitcast i32 %223 to <2 x half>
  %225 = getelementptr i32, i32* %203, i32 7
  %226 = load i32, i32* %225, align 4
  %227 = bitcast i32 %226 to <2 x half>
  %228 = getelementptr <8 x half>, <8 x half>* %167, i64 0
  %229 = bitcast <8 x half>* %228 to i32*
  %230 = getelementptr i32, i32* %229, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = bitcast i32 %231 to <2 x half>
  %233 = getelementptr i32, i32* %229, i32 1
  %234 = load i32, i32* %233, align 4
  %235 = bitcast i32 %234 to <2 x half>
  %236 = getelementptr i32, i32* %229, i32 2
  %237 = load i32, i32* %236, align 4
  %238 = bitcast i32 %237 to <2 x half>
  %239 = getelementptr i32, i32* %229, i32 3
  %240 = load i32, i32* %239, align 4
  %241 = bitcast i32 %240 to <2 x half>
  %242 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %180, <2 x half> %183, <2 x half> %186, <2 x half> %189, <2 x half> %192, <2 x half> %195, <2 x half> %198, <2 x half> %201, <2 x half> %206, <2 x half> %209, <2 x half> %212, <2 x half> %215, <2 x half> %218, <2 x half> %221, <2 x half> %224, <2 x half> %227, <2 x half> %232, <2 x half> %235, <2 x half> %238, <2 x half> %241)
  %243 = getelementptr <8 x half>, <8 x half>* %172, i64 0
  %244 = bitcast <8 x half>* %243 to i32*
  %245 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 0
  %246 = bitcast <2 x half> %245 to i32
  %247 = getelementptr i32, i32* %244, i32 0
  store i32 %246, i32* %247, align 4
  %248 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 1
  %249 = bitcast <2 x half> %248 to i32
  %250 = getelementptr i32, i32* %244, i32 1
  store i32 %249, i32* %250, align 4
  %251 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 2
  %252 = bitcast <2 x half> %251 to i32
  %253 = getelementptr i32, i32* %244, i32 2
  store i32 %252, i32* %253, align 4
  %254 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %242, 3
  %255 = bitcast <2 x half> %254 to i32
  %256 = getelementptr i32, i32* %244, i32 3
  store i32 %255, i32* %256, align 4
  %257 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %258 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %259 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %260 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %261 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %262 = getelementptr <8 x half>, <8 x half>* %258, i64 0
  %263 = bitcast <8 x half>* %262 to i32*
  %264 = getelementptr i32, i32* %263, i32 0
  %265 = load i32, i32* %264, align 4
  %266 = bitcast i32 %265 to <2 x half>
  %267 = getelementptr i32, i32* %263, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = bitcast i32 %268 to <2 x half>
  %270 = getelementptr i32, i32* %263, i32 2
  %271 = load i32, i32* %270, align 4
  %272 = bitcast i32 %271 to <2 x half>
  %273 = getelementptr i32, i32* %263, i32 3
  %274 = load i32, i32* %273, align 4
  %275 = bitcast i32 %274 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %266, <2 x half> %269, <2 x half> %272, <2 x half> %275, i32 32)
  ret void
}

-----------------------------------------------------------
Dominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %53 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %52, <16 x half>* %51, 1
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 0, 2
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 3, 0
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 1, 4, 0
  %57 = alloca <16 x half>, i64 1, align 32
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %57, 0
  %59 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, <16 x half>* %57, 1
  %60 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca <8 x half>, i64 1, align 16
  %64 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %63, 0
  %65 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %64, <8 x half>* %63, 1
  %66 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 0, 2
  %67 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %66, i64 1, 3, 0
  %68 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %67, i64 1, 4, 0
  %69 = alloca <8 x half>, i64 1, align 16
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %69, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %69, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca i32, i64 12, align 4
  %76 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %75, 0
  %77 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %76, i32* %75, 1
  %78 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %77, i64 0, 2
  %79 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %78, i64 2, 3, 0
  %80 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %79, i64 6, 4, 0
  %81 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %80, i64 6, 3, 1
  %82 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %81, i64 1, 4, 1
  br label %83

83:                                               ; preds = %19
  %84 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %85 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %86 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %87 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %88 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %89 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %90 = getelementptr <16 x half>, <16 x half>* %85, i64 0
  %91 = bitcast <16 x half>* %90 to i32*
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 0
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %91, i32 0
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 1
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %91, i32 1
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 2
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %91, i32 2
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 3
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %91, i32 3
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 4
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %91, i32 4
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 5
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %91, i32 5
  store i32 %108, i32* %109, align 4
  %110 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 6
  %111 = bitcast <2 x half> %110 to i32
  %112 = getelementptr i32, i32* %91, i32 6
  store i32 %111, i32* %112, align 4
  %113 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 7
  %114 = bitcast <2 x half> %113 to i32
  %115 = getelementptr i32, i32* %91, i32 7
  store i32 %114, i32* %115, align 4
  %116 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %117 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %118 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %119 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %120 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %121 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %122 = getelementptr <16 x half>, <16 x half>* %117, i64 0
  %123 = bitcast <16 x half>* %122 to i32*
  %124 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 0
  %125 = bitcast <2 x half> %124 to i32
  %126 = getelementptr i32, i32* %123, i32 0
  store i32 %125, i32* %126, align 4
  %127 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 1
  %128 = bitcast <2 x half> %127 to i32
  %129 = getelementptr i32, i32* %123, i32 1
  store i32 %128, i32* %129, align 4
  %130 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 2
  %131 = bitcast <2 x half> %130 to i32
  %132 = getelementptr i32, i32* %123, i32 2
  store i32 %131, i32* %132, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 3
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %123, i32 3
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 4
  %137 = bitcast <2 x half> %136 to i32
  %138 = getelementptr i32, i32* %123, i32 4
  store i32 %137, i32* %138, align 4
  %139 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 5
  %140 = bitcast <2 x half> %139 to i32
  %141 = getelementptr i32, i32* %123, i32 5
  store i32 %140, i32* %141, align 4
  %142 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 6
  %143 = bitcast <2 x half> %142 to i32
  %144 = getelementptr i32, i32* %123, i32 6
  store i32 %143, i32* %144, align 4
  %145 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 7
  %146 = bitcast <2 x half> %145 to i32
  %147 = getelementptr i32, i32* %123, i32 7
  store i32 %146, i32* %147, align 4
  %148 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 0
  %149 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 1
  %150 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 2
  %151 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 3, 0
  %152 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 4, 0
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %154 = getelementptr <8 x half>, <8 x half>* %149, i64 0
  %155 = bitcast <8 x half>* %154 to i32*
  %156 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %157 = bitcast <2 x half> %156 to i32
  %158 = getelementptr i32, i32* %155, i32 0
  store i32 %157, i32* %158, align 4
  %159 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %160 = bitcast <2 x half> %159 to i32
  %161 = getelementptr i32, i32* %155, i32 1
  store i32 %160, i32* %161, align 4
  %162 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %163 = bitcast <2 x half> %162 to i32
  %164 = getelementptr i32, i32* %155, i32 2
  store i32 %163, i32* %164, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %155, i32 3
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %169 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %170 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %171 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %172 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %173 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %174 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %175 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %176 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %177 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %178 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 0
  %179 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 1
  %180 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 2
  %181 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 3, 0
  %182 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 4, 0
  %183 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %184 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %185 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %186 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %187 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %188 = getelementptr <16 x half>, <16 x half>* %169, i64 0
  %189 = bitcast <16 x half>* %188 to i32*
  %190 = getelementptr i32, i32* %189, i32 0
  %191 = load i32, i32* %190, align 4
  %192 = bitcast i32 %191 to <2 x half>
  %193 = getelementptr i32, i32* %189, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = bitcast i32 %194 to <2 x half>
  %196 = getelementptr i32, i32* %189, i32 2
  %197 = load i32, i32* %196, align 4
  %198 = bitcast i32 %197 to <2 x half>
  %199 = getelementptr i32, i32* %189, i32 3
  %200 = load i32, i32* %199, align 4
  %201 = bitcast i32 %200 to <2 x half>
  %202 = getelementptr i32, i32* %189, i32 4
  %203 = load i32, i32* %202, align 4
  %204 = bitcast i32 %203 to <2 x half>
  %205 = getelementptr i32, i32* %189, i32 5
  %206 = load i32, i32* %205, align 4
  %207 = bitcast i32 %206 to <2 x half>
  %208 = getelementptr i32, i32* %189, i32 6
  %209 = load i32, i32* %208, align 4
  %210 = bitcast i32 %209 to <2 x half>
  %211 = getelementptr i32, i32* %189, i32 7
  %212 = load i32, i32* %211, align 4
  %213 = bitcast i32 %212 to <2 x half>
  %214 = getelementptr <16 x half>, <16 x half>* %174, i64 0
  %215 = bitcast <16 x half>* %214 to i32*
  %216 = getelementptr i32, i32* %215, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = bitcast i32 %217 to <2 x half>
  %219 = getelementptr i32, i32* %215, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = bitcast i32 %220 to <2 x half>
  %222 = getelementptr i32, i32* %215, i32 2
  %223 = load i32, i32* %222, align 4
  %224 = bitcast i32 %223 to <2 x half>
  %225 = getelementptr i32, i32* %215, i32 3
  %226 = load i32, i32* %225, align 4
  %227 = bitcast i32 %226 to <2 x half>
  %228 = getelementptr i32, i32* %215, i32 4
  %229 = load i32, i32* %228, align 4
  %230 = bitcast i32 %229 to <2 x half>
  %231 = getelementptr i32, i32* %215, i32 5
  %232 = load i32, i32* %231, align 4
  %233 = bitcast i32 %232 to <2 x half>
  %234 = getelementptr i32, i32* %215, i32 6
  %235 = load i32, i32* %234, align 4
  %236 = bitcast i32 %235 to <2 x half>
  %237 = getelementptr i32, i32* %215, i32 7
  %238 = load i32, i32* %237, align 4
  %239 = bitcast i32 %238 to <2 x half>
  %240 = getelementptr <8 x half>, <8 x half>* %179, i64 0
  %241 = bitcast <8 x half>* %240 to i32*
  %242 = getelementptr i32, i32* %241, i32 0
  %243 = load i32, i32* %242, align 4
  %244 = bitcast i32 %243 to <2 x half>
  %245 = getelementptr i32, i32* %241, i32 1
  %246 = load i32, i32* %245, align 4
  %247 = bitcast i32 %246 to <2 x half>
  %248 = getelementptr i32, i32* %241, i32 2
  %249 = load i32, i32* %248, align 4
  %250 = bitcast i32 %249 to <2 x half>
  %251 = getelementptr i32, i32* %241, i32 3
  %252 = load i32, i32* %251, align 4
  %253 = bitcast i32 %252 to <2 x half>
  %254 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %192, <2 x half> %195, <2 x half> %198, <2 x half> %201, <2 x half> %204, <2 x half> %207, <2 x half> %210, <2 x half> %213, <2 x half> %218, <2 x half> %221, <2 x half> %224, <2 x half> %227, <2 x half> %230, <2 x half> %233, <2 x half> %236, <2 x half> %239, <2 x half> %244, <2 x half> %247, <2 x half> %250, <2 x half> %253)
  %255 = getelementptr <8 x half>, <8 x half>* %184, i64 0
  %256 = bitcast <8 x half>* %255 to i32*
  %257 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 0
  %258 = bitcast <2 x half> %257 to i32
  %259 = getelementptr i32, i32* %256, i32 0
  store i32 %258, i32* %259, align 4
  %260 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 1
  %261 = bitcast <2 x half> %260 to i32
  %262 = getelementptr i32, i32* %256, i32 1
  store i32 %261, i32* %262, align 4
  %263 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 2
  %264 = bitcast <2 x half> %263 to i32
  %265 = getelementptr i32, i32* %256, i32 2
  store i32 %264, i32* %265, align 4
  %266 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 3
  %267 = bitcast <2 x half> %266 to i32
  %268 = getelementptr i32, i32* %256, i32 3
  store i32 %267, i32* %268, align 4
  %269 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %270 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %271 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %272 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %273 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %274 = getelementptr <8 x half>, <8 x half>* %270, i64 0
  %275 = bitcast <8 x half>* %274 to i32*
  %276 = getelementptr i32, i32* %275, i32 0
  %277 = load i32, i32* %276, align 4
  %278 = bitcast i32 %277 to <2 x half>
  %279 = getelementptr i32, i32* %275, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = bitcast i32 %280 to <2 x half>
  %282 = getelementptr i32, i32* %275, i32 2
  %283 = load i32, i32* %282, align 4
  %284 = bitcast i32 %283 to <2 x half>
  %285 = getelementptr i32, i32* %275, i32 3
  %286 = load i32, i32* %285, align 4
  %287 = bitcast i32 %286 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %278, <2 x half> %281, <2 x half> %284, <2 x half> %287, i32 32)
  ret void
}

-----------------------------------------------------------
SROA
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %53 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %52, <16 x half>* %51, 1
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 0, 2
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 3, 0
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 1, 4, 0
  %57 = alloca <16 x half>, i64 1, align 32
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %57, 0
  %59 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, <16 x half>* %57, 1
  %60 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca <8 x half>, i64 1, align 16
  %64 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %63, 0
  %65 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %64, <8 x half>* %63, 1
  %66 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 0, 2
  %67 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %66, i64 1, 3, 0
  %68 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %67, i64 1, 4, 0
  %69 = alloca <8 x half>, i64 1, align 16
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %69, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %69, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca i32, i64 12, align 4
  %76 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %75, 0
  %77 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %76, i32* %75, 1
  %78 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %77, i64 0, 2
  %79 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %78, i64 2, 3, 0
  %80 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %79, i64 6, 4, 0
  %81 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %80, i64 6, 3, 1
  %82 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %81, i64 1, 4, 1
  br label %83

83:                                               ; preds = %19
  %84 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %85 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %86 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %87 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %88 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %89 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %90 = getelementptr <16 x half>, <16 x half>* %85, i64 0
  %91 = bitcast <16 x half>* %90 to i32*
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 0
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %91, i32 0
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 1
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %91, i32 1
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 2
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %91, i32 2
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 3
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %91, i32 3
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 4
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %91, i32 4
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 5
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %91, i32 5
  store i32 %108, i32* %109, align 4
  %110 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 6
  %111 = bitcast <2 x half> %110 to i32
  %112 = getelementptr i32, i32* %91, i32 6
  store i32 %111, i32* %112, align 4
  %113 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 7
  %114 = bitcast <2 x half> %113 to i32
  %115 = getelementptr i32, i32* %91, i32 7
  store i32 %114, i32* %115, align 4
  %116 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %117 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %118 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %119 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %120 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %121 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %122 = getelementptr <16 x half>, <16 x half>* %117, i64 0
  %123 = bitcast <16 x half>* %122 to i32*
  %124 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 0
  %125 = bitcast <2 x half> %124 to i32
  %126 = getelementptr i32, i32* %123, i32 0
  store i32 %125, i32* %126, align 4
  %127 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 1
  %128 = bitcast <2 x half> %127 to i32
  %129 = getelementptr i32, i32* %123, i32 1
  store i32 %128, i32* %129, align 4
  %130 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 2
  %131 = bitcast <2 x half> %130 to i32
  %132 = getelementptr i32, i32* %123, i32 2
  store i32 %131, i32* %132, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 3
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %123, i32 3
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 4
  %137 = bitcast <2 x half> %136 to i32
  %138 = getelementptr i32, i32* %123, i32 4
  store i32 %137, i32* %138, align 4
  %139 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 5
  %140 = bitcast <2 x half> %139 to i32
  %141 = getelementptr i32, i32* %123, i32 5
  store i32 %140, i32* %141, align 4
  %142 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 6
  %143 = bitcast <2 x half> %142 to i32
  %144 = getelementptr i32, i32* %123, i32 6
  store i32 %143, i32* %144, align 4
  %145 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 7
  %146 = bitcast <2 x half> %145 to i32
  %147 = getelementptr i32, i32* %123, i32 7
  store i32 %146, i32* %147, align 4
  %148 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 0
  %149 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 1
  %150 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 2
  %151 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 3, 0
  %152 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 4, 0
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %154 = getelementptr <8 x half>, <8 x half>* %149, i64 0
  %155 = bitcast <8 x half>* %154 to i32*
  %156 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %157 = bitcast <2 x half> %156 to i32
  %158 = getelementptr i32, i32* %155, i32 0
  store i32 %157, i32* %158, align 4
  %159 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %160 = bitcast <2 x half> %159 to i32
  %161 = getelementptr i32, i32* %155, i32 1
  store i32 %160, i32* %161, align 4
  %162 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %163 = bitcast <2 x half> %162 to i32
  %164 = getelementptr i32, i32* %155, i32 2
  store i32 %163, i32* %164, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %155, i32 3
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %169 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %170 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %171 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %172 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %173 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %174 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %175 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %176 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %177 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %178 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 0
  %179 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 1
  %180 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 2
  %181 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 3, 0
  %182 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 4, 0
  %183 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %184 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %185 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %186 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %187 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %188 = getelementptr <16 x half>, <16 x half>* %169, i64 0
  %189 = bitcast <16 x half>* %188 to i32*
  %190 = getelementptr i32, i32* %189, i32 0
  %191 = load i32, i32* %190, align 4
  %192 = bitcast i32 %191 to <2 x half>
  %193 = getelementptr i32, i32* %189, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = bitcast i32 %194 to <2 x half>
  %196 = getelementptr i32, i32* %189, i32 2
  %197 = load i32, i32* %196, align 4
  %198 = bitcast i32 %197 to <2 x half>
  %199 = getelementptr i32, i32* %189, i32 3
  %200 = load i32, i32* %199, align 4
  %201 = bitcast i32 %200 to <2 x half>
  %202 = getelementptr i32, i32* %189, i32 4
  %203 = load i32, i32* %202, align 4
  %204 = bitcast i32 %203 to <2 x half>
  %205 = getelementptr i32, i32* %189, i32 5
  %206 = load i32, i32* %205, align 4
  %207 = bitcast i32 %206 to <2 x half>
  %208 = getelementptr i32, i32* %189, i32 6
  %209 = load i32, i32* %208, align 4
  %210 = bitcast i32 %209 to <2 x half>
  %211 = getelementptr i32, i32* %189, i32 7
  %212 = load i32, i32* %211, align 4
  %213 = bitcast i32 %212 to <2 x half>
  %214 = getelementptr <16 x half>, <16 x half>* %174, i64 0
  %215 = bitcast <16 x half>* %214 to i32*
  %216 = getelementptr i32, i32* %215, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = bitcast i32 %217 to <2 x half>
  %219 = getelementptr i32, i32* %215, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = bitcast i32 %220 to <2 x half>
  %222 = getelementptr i32, i32* %215, i32 2
  %223 = load i32, i32* %222, align 4
  %224 = bitcast i32 %223 to <2 x half>
  %225 = getelementptr i32, i32* %215, i32 3
  %226 = load i32, i32* %225, align 4
  %227 = bitcast i32 %226 to <2 x half>
  %228 = getelementptr i32, i32* %215, i32 4
  %229 = load i32, i32* %228, align 4
  %230 = bitcast i32 %229 to <2 x half>
  %231 = getelementptr i32, i32* %215, i32 5
  %232 = load i32, i32* %231, align 4
  %233 = bitcast i32 %232 to <2 x half>
  %234 = getelementptr i32, i32* %215, i32 6
  %235 = load i32, i32* %234, align 4
  %236 = bitcast i32 %235 to <2 x half>
  %237 = getelementptr i32, i32* %215, i32 7
  %238 = load i32, i32* %237, align 4
  %239 = bitcast i32 %238 to <2 x half>
  %240 = getelementptr <8 x half>, <8 x half>* %179, i64 0
  %241 = bitcast <8 x half>* %240 to i32*
  %242 = getelementptr i32, i32* %241, i32 0
  %243 = load i32, i32* %242, align 4
  %244 = bitcast i32 %243 to <2 x half>
  %245 = getelementptr i32, i32* %241, i32 1
  %246 = load i32, i32* %245, align 4
  %247 = bitcast i32 %246 to <2 x half>
  %248 = getelementptr i32, i32* %241, i32 2
  %249 = load i32, i32* %248, align 4
  %250 = bitcast i32 %249 to <2 x half>
  %251 = getelementptr i32, i32* %241, i32 3
  %252 = load i32, i32* %251, align 4
  %253 = bitcast i32 %252 to <2 x half>
  %254 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %192, <2 x half> %195, <2 x half> %198, <2 x half> %201, <2 x half> %204, <2 x half> %207, <2 x half> %210, <2 x half> %213, <2 x half> %218, <2 x half> %221, <2 x half> %224, <2 x half> %227, <2 x half> %230, <2 x half> %233, <2 x half> %236, <2 x half> %239, <2 x half> %244, <2 x half> %247, <2 x half> %250, <2 x half> %253)
  %255 = getelementptr <8 x half>, <8 x half>* %184, i64 0
  %256 = bitcast <8 x half>* %255 to i32*
  %257 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 0
  %258 = bitcast <2 x half> %257 to i32
  %259 = getelementptr i32, i32* %256, i32 0
  store i32 %258, i32* %259, align 4
  %260 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 1
  %261 = bitcast <2 x half> %260 to i32
  %262 = getelementptr i32, i32* %256, i32 1
  store i32 %261, i32* %262, align 4
  %263 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 2
  %264 = bitcast <2 x half> %263 to i32
  %265 = getelementptr i32, i32* %256, i32 2
  store i32 %264, i32* %265, align 4
  %266 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 3
  %267 = bitcast <2 x half> %266 to i32
  %268 = getelementptr i32, i32* %256, i32 3
  store i32 %267, i32* %268, align 4
  %269 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %270 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %271 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %272 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %273 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %274 = getelementptr <8 x half>, <8 x half>* %270, i64 0
  %275 = bitcast <8 x half>* %274 to i32*
  %276 = getelementptr i32, i32* %275, i32 0
  %277 = load i32, i32* %276, align 4
  %278 = bitcast i32 %277 to <2 x half>
  %279 = getelementptr i32, i32* %275, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = bitcast i32 %280 to <2 x half>
  %282 = getelementptr i32, i32* %275, i32 2
  %283 = load i32, i32* %282, align 4
  %284 = bitcast i32 %283 to <2 x half>
  %285 = getelementptr i32, i32* %275, i32 3
  %286 = load i32, i32* %285, align 4
  %287 = bitcast i32 %286 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %278, <2 x half> %281, <2 x half> %284, <2 x half> %287, i32 32)
  ret void
}

-----------------------------------------------------------
convert address space of alloca'ed memory to local
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %53 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %52, <16 x half>* %51, 1
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 0, 2
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 3, 0
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 1, 4, 0
  %57 = alloca <16 x half>, i64 1, align 32
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %57, 0
  %59 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, <16 x half>* %57, 1
  %60 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca <8 x half>, i64 1, align 16
  %64 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %63, 0
  %65 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %64, <8 x half>* %63, 1
  %66 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 0, 2
  %67 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %66, i64 1, 3, 0
  %68 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %67, i64 1, 4, 0
  %69 = alloca <8 x half>, i64 1, align 16
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %69, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %69, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca i32, i64 12, align 4
  %76 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %75, 0
  %77 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %76, i32* %75, 1
  %78 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %77, i64 0, 2
  %79 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %78, i64 2, 3, 0
  %80 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %79, i64 6, 4, 0
  %81 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %80, i64 6, 3, 1
  %82 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %81, i64 1, 4, 1
  br label %83

83:                                               ; preds = %19
  %84 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %85 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %86 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %87 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %88 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %89 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %90 = getelementptr <16 x half>, <16 x half>* %85, i64 0
  %91 = bitcast <16 x half>* %90 to i32*
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 0
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %91, i32 0
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 1
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %91, i32 1
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 2
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %91, i32 2
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 3
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %91, i32 3
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 4
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %91, i32 4
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 5
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %91, i32 5
  store i32 %108, i32* %109, align 4
  %110 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 6
  %111 = bitcast <2 x half> %110 to i32
  %112 = getelementptr i32, i32* %91, i32 6
  store i32 %111, i32* %112, align 4
  %113 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %89, 7
  %114 = bitcast <2 x half> %113 to i32
  %115 = getelementptr i32, i32* %91, i32 7
  store i32 %114, i32* %115, align 4
  %116 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %117 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %118 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %119 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %120 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %121 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %122 = getelementptr <16 x half>, <16 x half>* %117, i64 0
  %123 = bitcast <16 x half>* %122 to i32*
  %124 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 0
  %125 = bitcast <2 x half> %124 to i32
  %126 = getelementptr i32, i32* %123, i32 0
  store i32 %125, i32* %126, align 4
  %127 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 1
  %128 = bitcast <2 x half> %127 to i32
  %129 = getelementptr i32, i32* %123, i32 1
  store i32 %128, i32* %129, align 4
  %130 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 2
  %131 = bitcast <2 x half> %130 to i32
  %132 = getelementptr i32, i32* %123, i32 2
  store i32 %131, i32* %132, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 3
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %123, i32 3
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 4
  %137 = bitcast <2 x half> %136 to i32
  %138 = getelementptr i32, i32* %123, i32 4
  store i32 %137, i32* %138, align 4
  %139 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 5
  %140 = bitcast <2 x half> %139 to i32
  %141 = getelementptr i32, i32* %123, i32 5
  store i32 %140, i32* %141, align 4
  %142 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 6
  %143 = bitcast <2 x half> %142 to i32
  %144 = getelementptr i32, i32* %123, i32 6
  store i32 %143, i32* %144, align 4
  %145 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %121, 7
  %146 = bitcast <2 x half> %145 to i32
  %147 = getelementptr i32, i32* %123, i32 7
  store i32 %146, i32* %147, align 4
  %148 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 0
  %149 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 1
  %150 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 2
  %151 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 3, 0
  %152 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 4, 0
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %154 = getelementptr <8 x half>, <8 x half>* %149, i64 0
  %155 = bitcast <8 x half>* %154 to i32*
  %156 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %157 = bitcast <2 x half> %156 to i32
  %158 = getelementptr i32, i32* %155, i32 0
  store i32 %157, i32* %158, align 4
  %159 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %160 = bitcast <2 x half> %159 to i32
  %161 = getelementptr i32, i32* %155, i32 1
  store i32 %160, i32* %161, align 4
  %162 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %163 = bitcast <2 x half> %162 to i32
  %164 = getelementptr i32, i32* %155, i32 2
  store i32 %163, i32* %164, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %155, i32 3
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 0
  %169 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 1
  %170 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 2
  %171 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 3, 0
  %172 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, 4, 0
  %173 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 0
  %174 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 1
  %175 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 2
  %176 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 3, 0
  %177 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, 4, 0
  %178 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 0
  %179 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 1
  %180 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 2
  %181 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 3, 0
  %182 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, 4, 0
  %183 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %184 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %185 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %186 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %187 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %188 = getelementptr <16 x half>, <16 x half>* %169, i64 0
  %189 = bitcast <16 x half>* %188 to i32*
  %190 = getelementptr i32, i32* %189, i32 0
  %191 = load i32, i32* %190, align 4
  %192 = bitcast i32 %191 to <2 x half>
  %193 = getelementptr i32, i32* %189, i32 1
  %194 = load i32, i32* %193, align 4
  %195 = bitcast i32 %194 to <2 x half>
  %196 = getelementptr i32, i32* %189, i32 2
  %197 = load i32, i32* %196, align 4
  %198 = bitcast i32 %197 to <2 x half>
  %199 = getelementptr i32, i32* %189, i32 3
  %200 = load i32, i32* %199, align 4
  %201 = bitcast i32 %200 to <2 x half>
  %202 = getelementptr i32, i32* %189, i32 4
  %203 = load i32, i32* %202, align 4
  %204 = bitcast i32 %203 to <2 x half>
  %205 = getelementptr i32, i32* %189, i32 5
  %206 = load i32, i32* %205, align 4
  %207 = bitcast i32 %206 to <2 x half>
  %208 = getelementptr i32, i32* %189, i32 6
  %209 = load i32, i32* %208, align 4
  %210 = bitcast i32 %209 to <2 x half>
  %211 = getelementptr i32, i32* %189, i32 7
  %212 = load i32, i32* %211, align 4
  %213 = bitcast i32 %212 to <2 x half>
  %214 = getelementptr <16 x half>, <16 x half>* %174, i64 0
  %215 = bitcast <16 x half>* %214 to i32*
  %216 = getelementptr i32, i32* %215, i32 0
  %217 = load i32, i32* %216, align 4
  %218 = bitcast i32 %217 to <2 x half>
  %219 = getelementptr i32, i32* %215, i32 1
  %220 = load i32, i32* %219, align 4
  %221 = bitcast i32 %220 to <2 x half>
  %222 = getelementptr i32, i32* %215, i32 2
  %223 = load i32, i32* %222, align 4
  %224 = bitcast i32 %223 to <2 x half>
  %225 = getelementptr i32, i32* %215, i32 3
  %226 = load i32, i32* %225, align 4
  %227 = bitcast i32 %226 to <2 x half>
  %228 = getelementptr i32, i32* %215, i32 4
  %229 = load i32, i32* %228, align 4
  %230 = bitcast i32 %229 to <2 x half>
  %231 = getelementptr i32, i32* %215, i32 5
  %232 = load i32, i32* %231, align 4
  %233 = bitcast i32 %232 to <2 x half>
  %234 = getelementptr i32, i32* %215, i32 6
  %235 = load i32, i32* %234, align 4
  %236 = bitcast i32 %235 to <2 x half>
  %237 = getelementptr i32, i32* %215, i32 7
  %238 = load i32, i32* %237, align 4
  %239 = bitcast i32 %238 to <2 x half>
  %240 = getelementptr <8 x half>, <8 x half>* %179, i64 0
  %241 = bitcast <8 x half>* %240 to i32*
  %242 = getelementptr i32, i32* %241, i32 0
  %243 = load i32, i32* %242, align 4
  %244 = bitcast i32 %243 to <2 x half>
  %245 = getelementptr i32, i32* %241, i32 1
  %246 = load i32, i32* %245, align 4
  %247 = bitcast i32 %246 to <2 x half>
  %248 = getelementptr i32, i32* %241, i32 2
  %249 = load i32, i32* %248, align 4
  %250 = bitcast i32 %249 to <2 x half>
  %251 = getelementptr i32, i32* %241, i32 3
  %252 = load i32, i32* %251, align 4
  %253 = bitcast i32 %252 to <2 x half>
  %254 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %192, <2 x half> %195, <2 x half> %198, <2 x half> %201, <2 x half> %204, <2 x half> %207, <2 x half> %210, <2 x half> %213, <2 x half> %218, <2 x half> %221, <2 x half> %224, <2 x half> %227, <2 x half> %230, <2 x half> %233, <2 x half> %236, <2 x half> %239, <2 x half> %244, <2 x half> %247, <2 x half> %250, <2 x half> %253)
  %255 = getelementptr <8 x half>, <8 x half>* %184, i64 0
  %256 = bitcast <8 x half>* %255 to i32*
  %257 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 0
  %258 = bitcast <2 x half> %257 to i32
  %259 = getelementptr i32, i32* %256, i32 0
  store i32 %258, i32* %259, align 4
  %260 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 1
  %261 = bitcast <2 x half> %260 to i32
  %262 = getelementptr i32, i32* %256, i32 1
  store i32 %261, i32* %262, align 4
  %263 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 2
  %264 = bitcast <2 x half> %263 to i32
  %265 = getelementptr i32, i32* %256, i32 2
  store i32 %264, i32* %265, align 4
  %266 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %254, 3
  %267 = bitcast <2 x half> %266 to i32
  %268 = getelementptr i32, i32* %256, i32 3
  store i32 %267, i32* %268, align 4
  %269 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %270 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %271 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %272 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %273 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %274 = getelementptr <8 x half>, <8 x half>* %270, i64 0
  %275 = bitcast <8 x half>* %274 to i32*
  %276 = getelementptr i32, i32* %275, i32 0
  %277 = load i32, i32* %276, align 4
  %278 = bitcast i32 %277 to <2 x half>
  %279 = getelementptr i32, i32* %275, i32 1
  %280 = load i32, i32* %279, align 4
  %281 = bitcast i32 %280 to <2 x half>
  %282 = getelementptr i32, i32* %275, i32 2
  %283 = load i32, i32* %282, align 4
  %284 = bitcast i32 %283 to <2 x half>
  %285 = getelementptr i32, i32* %275, i32 3
  %286 = load i32, i32* %285, align 4
  %287 = bitcast i32 %286 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %278, <2 x half> %281, <2 x half> %284, <2 x half> %287, i32 32)
  ret void
}

-----------------------------------------------------------
Infer address spaces
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Dominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Natural Loop Information
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Scalar Evolution Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Split GEPs to a variadic base and a constant offset for better CSE
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Speculatively execute instructions
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Scalar Evolution Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Straight line strength reduction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Early CSE
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half addrspace(1)* %20 to half*
  %22 = addrspacecast half* %12 to half addrspace(1)*
  %23 = addrspacecast half addrspace(1)* %22 to half*
  %24 = addrspacecast i32* %8 to i32 addrspace(1)*
  %25 = addrspacecast i32 addrspace(1)* %24 to i32*
  %26 = addrspacecast i32* %7 to i32 addrspace(1)*
  %27 = addrspacecast i32 addrspace(1)* %26 to i32*
  %28 = addrspacecast i32* %1 to i32 addrspace(1)*
  %29 = addrspacecast i32 addrspace(1)* %28 to i32*
  %30 = addrspacecast i32* %0 to i32 addrspace(1)*
  %31 = addrspacecast i32 addrspace(1)* %30 to i32*
  %32 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %31, 0
  %33 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %32, i32* %29, 1
  %34 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %33, i64 %2, 2
  %35 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %34, i64 %3, 3, 0
  %36 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %35, i64 %5, 4, 0
  %37 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %36, i64 %4, 3, 1
  %38 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %37, i64 %6, 4, 1
  %39 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %27, 0
  %40 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %39, i32* %25, 1
  %41 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %40, i64 %9, 2
  %42 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %41, i64 %10, 3, 0
  %43 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %42, i64 %11, 4, 0
  %44 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %23, 0
  %45 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %44, half* %21, 1
  %46 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %45, i64 %14, 2
  %47 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %46, i64 %15, 3, 0
  %48 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %47, i64 %17, 4, 0
  %49 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %48, i64 %16, 3, 1
  %50 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %49, i64 %18, 4, 1
  %51 = alloca <16 x half>, i64 1, align 32
  %52 = addrspacecast <16 x half>* %51 to <16 x half> addrspace(5)*
  %53 = addrspacecast <16 x half> addrspace(5)* %52 to <16 x half>*
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %51, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, <16 x half>* %51, 1
  %56 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %55, i64 0, 2
  %57 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %56, i64 1, 3, 0
  %58 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %57, i64 1, 4, 0
  %59 = alloca <16 x half>, i64 1, align 32
  %60 = addrspacecast <16 x half>* %59 to <16 x half> addrspace(5)*
  %61 = addrspacecast <16 x half> addrspace(5)* %60 to <16 x half>*
  %62 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %59, 0
  %63 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %62, <16 x half>* %59, 1
  %64 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %63, i64 0, 2
  %65 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %64, i64 1, 3, 0
  %66 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %65, i64 1, 4, 0
  %67 = alloca <8 x half>, i64 1, align 16
  %68 = addrspacecast <8 x half>* %67 to <8 x half> addrspace(5)*
  %69 = addrspacecast <8 x half> addrspace(5)* %68 to <8 x half>*
  %70 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %67, 0
  %71 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %70, <8 x half>* %67, 1
  %72 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %71, i64 0, 2
  %73 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %72, i64 1, 3, 0
  %74 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %73, i64 1, 4, 0
  %75 = alloca <8 x half>, i64 1, align 16
  %76 = addrspacecast <8 x half>* %75 to <8 x half> addrspace(5)*
  %77 = addrspacecast <8 x half> addrspace(5)* %76 to <8 x half>*
  %78 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %75, 0
  %79 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %78, <8 x half>* %75, 1
  %80 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %79, i64 0, 2
  %81 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %80, i64 1, 3, 0
  %82 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %81, i64 1, 4, 0
  %83 = alloca i32, i64 12, align 4
  %84 = addrspacecast i32* %83 to i32 addrspace(5)*
  %85 = addrspacecast i32 addrspace(5)* %84 to i32*
  %86 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %83, 0
  %87 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %86, i32* %83, 1
  %88 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %87, i64 0, 2
  %89 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %88, i64 2, 3, 0
  %90 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %89, i64 6, 4, 0
  %91 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %90, i64 6, 3, 1
  %92 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %91, i64 1, 4, 1
  br label %93

93:                                               ; preds = %19
  %94 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %95 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %96 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %97 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %98 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %99 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %100 = getelementptr <16 x half>, <16 x half>* %95, i64 0
  %101 = bitcast <16 x half>* %100 to i32*
  %102 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 0
  %103 = bitcast <2 x half> %102 to i32
  %104 = getelementptr i32, i32* %101, i32 0
  store i32 %103, i32* %104, align 4
  %105 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 1
  %106 = bitcast <2 x half> %105 to i32
  %107 = getelementptr i32, i32* %101, i32 1
  store i32 %106, i32* %107, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 2
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %101, i32 2
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 3
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %101, i32 3
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 4
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %101, i32 4
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 5
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %101, i32 5
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 6
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %101, i32 6
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %99, 7
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %101, i32 7
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %127 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %128 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %129 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %130 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %131 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %132 = getelementptr <16 x half>, <16 x half>* %127, i64 0
  %133 = bitcast <16 x half>* %132 to i32*
  %134 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 0
  %135 = bitcast <2 x half> %134 to i32
  %136 = getelementptr i32, i32* %133, i32 0
  store i32 %135, i32* %136, align 4
  %137 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 1
  %138 = bitcast <2 x half> %137 to i32
  %139 = getelementptr i32, i32* %133, i32 1
  store i32 %138, i32* %139, align 4
  %140 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 2
  %141 = bitcast <2 x half> %140 to i32
  %142 = getelementptr i32, i32* %133, i32 2
  store i32 %141, i32* %142, align 4
  %143 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 3
  %144 = bitcast <2 x half> %143 to i32
  %145 = getelementptr i32, i32* %133, i32 3
  store i32 %144, i32* %145, align 4
  %146 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 4
  %147 = bitcast <2 x half> %146 to i32
  %148 = getelementptr i32, i32* %133, i32 4
  store i32 %147, i32* %148, align 4
  %149 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 5
  %150 = bitcast <2 x half> %149 to i32
  %151 = getelementptr i32, i32* %133, i32 5
  store i32 %150, i32* %151, align 4
  %152 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 6
  %153 = bitcast <2 x half> %152 to i32
  %154 = getelementptr i32, i32* %133, i32 6
  store i32 %153, i32* %154, align 4
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %131, 7
  %156 = bitcast <2 x half> %155 to i32
  %157 = getelementptr i32, i32* %133, i32 7
  store i32 %156, i32* %157, align 4
  %158 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %159 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %160 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %161 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %162 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %163 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %164 = getelementptr <8 x half>, <8 x half>* %159, i64 0
  %165 = bitcast <8 x half>* %164 to i32*
  %166 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 0
  %167 = bitcast <2 x half> %166 to i32
  %168 = getelementptr i32, i32* %165, i32 0
  store i32 %167, i32* %168, align 4
  %169 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 1
  %170 = bitcast <2 x half> %169 to i32
  %171 = getelementptr i32, i32* %165, i32 1
  store i32 %170, i32* %171, align 4
  %172 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 2
  %173 = bitcast <2 x half> %172 to i32
  %174 = getelementptr i32, i32* %165, i32 2
  store i32 %173, i32* %174, align 4
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %163, 3
  %176 = bitcast <2 x half> %175 to i32
  %177 = getelementptr i32, i32* %165, i32 3
  store i32 %176, i32* %177, align 4
  %178 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 0
  %179 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 1
  %180 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 2
  %181 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 3, 0
  %182 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %58, 4, 0
  %183 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 0
  %184 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 1
  %185 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 2
  %186 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 3, 0
  %187 = extractvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %66, 4, 0
  %188 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 0
  %189 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 1
  %190 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 2
  %191 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 3, 0
  %192 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %74, 4, 0
  %193 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %194 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %195 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %196 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %197 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %198 = getelementptr <16 x half>, <16 x half>* %179, i64 0
  %199 = bitcast <16 x half>* %198 to i32*
  %200 = getelementptr i32, i32* %199, i32 0
  %201 = load i32, i32* %200, align 4
  %202 = bitcast i32 %201 to <2 x half>
  %203 = getelementptr i32, i32* %199, i32 1
  %204 = load i32, i32* %203, align 4
  %205 = bitcast i32 %204 to <2 x half>
  %206 = getelementptr i32, i32* %199, i32 2
  %207 = load i32, i32* %206, align 4
  %208 = bitcast i32 %207 to <2 x half>
  %209 = getelementptr i32, i32* %199, i32 3
  %210 = load i32, i32* %209, align 4
  %211 = bitcast i32 %210 to <2 x half>
  %212 = getelementptr i32, i32* %199, i32 4
  %213 = load i32, i32* %212, align 4
  %214 = bitcast i32 %213 to <2 x half>
  %215 = getelementptr i32, i32* %199, i32 5
  %216 = load i32, i32* %215, align 4
  %217 = bitcast i32 %216 to <2 x half>
  %218 = getelementptr i32, i32* %199, i32 6
  %219 = load i32, i32* %218, align 4
  %220 = bitcast i32 %219 to <2 x half>
  %221 = getelementptr i32, i32* %199, i32 7
  %222 = load i32, i32* %221, align 4
  %223 = bitcast i32 %222 to <2 x half>
  %224 = getelementptr <16 x half>, <16 x half>* %184, i64 0
  %225 = bitcast <16 x half>* %224 to i32*
  %226 = getelementptr i32, i32* %225, i32 0
  %227 = load i32, i32* %226, align 4
  %228 = bitcast i32 %227 to <2 x half>
  %229 = getelementptr i32, i32* %225, i32 1
  %230 = load i32, i32* %229, align 4
  %231 = bitcast i32 %230 to <2 x half>
  %232 = getelementptr i32, i32* %225, i32 2
  %233 = load i32, i32* %232, align 4
  %234 = bitcast i32 %233 to <2 x half>
  %235 = getelementptr i32, i32* %225, i32 3
  %236 = load i32, i32* %235, align 4
  %237 = bitcast i32 %236 to <2 x half>
  %238 = getelementptr i32, i32* %225, i32 4
  %239 = load i32, i32* %238, align 4
  %240 = bitcast i32 %239 to <2 x half>
  %241 = getelementptr i32, i32* %225, i32 5
  %242 = load i32, i32* %241, align 4
  %243 = bitcast i32 %242 to <2 x half>
  %244 = getelementptr i32, i32* %225, i32 6
  %245 = load i32, i32* %244, align 4
  %246 = bitcast i32 %245 to <2 x half>
  %247 = getelementptr i32, i32* %225, i32 7
  %248 = load i32, i32* %247, align 4
  %249 = bitcast i32 %248 to <2 x half>
  %250 = getelementptr <8 x half>, <8 x half>* %189, i64 0
  %251 = bitcast <8 x half>* %250 to i32*
  %252 = getelementptr i32, i32* %251, i32 0
  %253 = load i32, i32* %252, align 4
  %254 = bitcast i32 %253 to <2 x half>
  %255 = getelementptr i32, i32* %251, i32 1
  %256 = load i32, i32* %255, align 4
  %257 = bitcast i32 %256 to <2 x half>
  %258 = getelementptr i32, i32* %251, i32 2
  %259 = load i32, i32* %258, align 4
  %260 = bitcast i32 %259 to <2 x half>
  %261 = getelementptr i32, i32* %251, i32 3
  %262 = load i32, i32* %261, align 4
  %263 = bitcast i32 %262 to <2 x half>
  %264 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %202, <2 x half> %205, <2 x half> %208, <2 x half> %211, <2 x half> %214, <2 x half> %217, <2 x half> %220, <2 x half> %223, <2 x half> %228, <2 x half> %231, <2 x half> %234, <2 x half> %237, <2 x half> %240, <2 x half> %243, <2 x half> %246, <2 x half> %249, <2 x half> %254, <2 x half> %257, <2 x half> %260, <2 x half> %263)
  %265 = getelementptr <8 x half>, <8 x half>* %194, i64 0
  %266 = bitcast <8 x half>* %265 to i32*
  %267 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 0
  %268 = bitcast <2 x half> %267 to i32
  %269 = getelementptr i32, i32* %266, i32 0
  store i32 %268, i32* %269, align 4
  %270 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 1
  %271 = bitcast <2 x half> %270 to i32
  %272 = getelementptr i32, i32* %266, i32 1
  store i32 %271, i32* %272, align 4
  %273 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 2
  %274 = bitcast <2 x half> %273 to i32
  %275 = getelementptr i32, i32* %266, i32 2
  store i32 %274, i32* %275, align 4
  %276 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %264, 3
  %277 = bitcast <2 x half> %276 to i32
  %278 = getelementptr i32, i32* %266, i32 3
  store i32 %277, i32* %278, align 4
  %279 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 0
  %280 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 1
  %281 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 2
  %282 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 3, 0
  %283 = extractvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %82, 4, 0
  %284 = getelementptr <8 x half>, <8 x half>* %280, i64 0
  %285 = bitcast <8 x half>* %284 to i32*
  %286 = getelementptr i32, i32* %285, i32 0
  %287 = load i32, i32* %286, align 4
  %288 = bitcast i32 %287 to <2 x half>
  %289 = getelementptr i32, i32* %285, i32 1
  %290 = load i32, i32* %289, align 4
  %291 = bitcast i32 %290 to <2 x half>
  %292 = getelementptr i32, i32* %285, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = bitcast i32 %293 to <2 x half>
  %295 = getelementptr i32, i32* %285, i32 3
  %296 = load i32, i32* %295, align 4
  %297 = bitcast i32 %296 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %288, <2 x half> %291, <2 x half> %294, <2 x half> %297, i32 32)
  ret void
}

-----------------------------------------------------------
Scalar Evolution Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half* %12 to half addrspace(1)*
  %22 = addrspacecast i32* %8 to i32 addrspace(1)*
  %23 = addrspacecast i32* %7 to i32 addrspace(1)*
  %24 = addrspacecast i32* %1 to i32 addrspace(1)*
  %25 = addrspacecast i32* %0 to i32 addrspace(1)*
  %26 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %27 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %26, i32* %1, 1
  %28 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %27, i64 %2, 2
  %29 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %28, i64 %3, 3, 0
  %30 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %29, i64 %5, 4, 0
  %31 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %30, i64 %4, 3, 1
  %32 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %33 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %32, i32* %8, 1
  %34 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %33, i64 %9, 2
  %35 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %34, i64 %10, 3, 0
  %36 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %37 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %36, half* %13, 1
  %38 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %37, i64 %14, 2
  %39 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %38, i64 %15, 3, 0
  %40 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %39, i64 %17, 4, 0
  %41 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %40, i64 %16, 3, 1
  %42 = alloca <16 x half>, i64 1, align 32
  %43 = addrspacecast <16 x half>* %42 to <16 x half> addrspace(5)*
  %44 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %42, 0
  %45 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, <16 x half>* %42, 1
  %46 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %47, i64 1, 4, 0
  %49 = alloca <16 x half>, i64 1, align 32
  %50 = addrspacecast <16 x half>* %49 to <16 x half> addrspace(5)*
  %51 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %49, 0
  %52 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %51, <16 x half>* %49, 1
  %53 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %52, i64 0, 2
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 1, 3, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 4, 0
  %56 = alloca <8 x half>, i64 1, align 16
  %57 = addrspacecast <8 x half>* %56 to <8 x half> addrspace(5)*
  %58 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %56, 0
  %59 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %58, <8 x half>* %56, 1
  %60 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca <8 x half>, i64 1, align 16
  %64 = addrspacecast <8 x half>* %63 to <8 x half> addrspace(5)*
  %65 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %63, 0
  %66 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %65, <8 x half>* %63, 1
  %67 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %66, i64 0, 2
  %68 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %67, i64 1, 3, 0
  %69 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, i64 1, 4, 0
  %70 = alloca i32, i64 12, align 4
  %71 = addrspacecast i32* %70 to i32 addrspace(5)*
  %72 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %70, 0
  %73 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %72, i32* %70, 1
  %74 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %73, i64 0, 2
  %75 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %74, i64 2, 3, 0
  %76 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %75, i64 6, 4, 0
  %77 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %76, i64 6, 3, 1
  br label %78

78:                                               ; preds = %19
  %79 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %80 = bitcast <16 x half>* %42 to i32*
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 0
  %82 = bitcast <2 x half> %81 to i32
  store i32 %82, i32* %80, align 4
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 1
  %84 = bitcast <2 x half> %83 to i32
  %85 = getelementptr i32, i32* %80, i32 1
  store i32 %84, i32* %85, align 4
  %86 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 2
  %87 = bitcast <2 x half> %86 to i32
  %88 = getelementptr i32, i32* %80, i32 2
  store i32 %87, i32* %88, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %80, i32 3
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 4
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %80, i32 4
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 5
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %80, i32 5
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 6
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %80, i32 6
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 7
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %80, i32 7
  store i32 %102, i32* %103, align 4
  %104 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %105 = bitcast <16 x half>* %49 to i32*
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 0
  %107 = bitcast <2 x half> %106 to i32
  store i32 %107, i32* %105, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 1
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %105, i32 1
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 2
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %105, i32 2
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 3
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %105, i32 3
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 4
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %105, i32 4
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 5
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %105, i32 5
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 6
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %105, i32 6
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 7
  %127 = bitcast <2 x half> %126 to i32
  %128 = getelementptr i32, i32* %105, i32 7
  store i32 %127, i32* %128, align 4
  %129 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %130 = bitcast <8 x half>* %56 to i32*
  %131 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 0
  %132 = bitcast <2 x half> %131 to i32
  store i32 %132, i32* %130, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 1
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %130, i32 1
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 2
  %137 = bitcast <2 x half> %136 to i32
  %138 = getelementptr i32, i32* %130, i32 2
  store i32 %137, i32* %138, align 4
  %139 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 3
  %140 = bitcast <2 x half> %139 to i32
  %141 = getelementptr i32, i32* %130, i32 3
  store i32 %140, i32* %141, align 4
  %142 = load i32, i32* %80, align 4
  %143 = bitcast i32 %142 to <2 x half>
  %144 = load i32, i32* %85, align 4
  %145 = bitcast i32 %144 to <2 x half>
  %146 = load i32, i32* %88, align 4
  %147 = bitcast i32 %146 to <2 x half>
  %148 = load i32, i32* %91, align 4
  %149 = bitcast i32 %148 to <2 x half>
  %150 = load i32, i32* %94, align 4
  %151 = bitcast i32 %150 to <2 x half>
  %152 = load i32, i32* %97, align 4
  %153 = bitcast i32 %152 to <2 x half>
  %154 = load i32, i32* %100, align 4
  %155 = bitcast i32 %154 to <2 x half>
  %156 = load i32, i32* %103, align 4
  %157 = bitcast i32 %156 to <2 x half>
  %158 = load i32, i32* %105, align 4
  %159 = bitcast i32 %158 to <2 x half>
  %160 = load i32, i32* %110, align 4
  %161 = bitcast i32 %160 to <2 x half>
  %162 = load i32, i32* %113, align 4
  %163 = bitcast i32 %162 to <2 x half>
  %164 = load i32, i32* %116, align 4
  %165 = bitcast i32 %164 to <2 x half>
  %166 = load i32, i32* %119, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %122, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %125, align 4
  %171 = bitcast i32 %170 to <2 x half>
  %172 = load i32, i32* %128, align 4
  %173 = bitcast i32 %172 to <2 x half>
  %174 = load i32, i32* %130, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %135, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %138, align 4
  %179 = bitcast i32 %178 to <2 x half>
  %180 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %143, <2 x half> %145, <2 x half> %147, <2 x half> %149, <2 x half> %151, <2 x half> %153, <2 x half> %155, <2 x half> %157, <2 x half> %159, <2 x half> %161, <2 x half> %163, <2 x half> %165, <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %173, <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %139)
  %181 = bitcast <8 x half>* %63 to i32*
  %182 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 0
  %183 = bitcast <2 x half> %182 to i32
  store i32 %183, i32* %181, align 4
  %184 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 1
  %185 = bitcast <2 x half> %184 to i32
  %186 = getelementptr i32, i32* %181, i32 1
  store i32 %185, i32* %186, align 4
  %187 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 2
  %188 = bitcast <2 x half> %187 to i32
  %189 = getelementptr i32, i32* %181, i32 2
  store i32 %188, i32* %189, align 4
  %190 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 3
  %191 = bitcast <2 x half> %190 to i32
  %192 = getelementptr i32, i32* %181, i32 3
  store i32 %191, i32* %192, align 4
  %193 = load i32, i32* %181, align 4
  %194 = bitcast i32 %193 to <2 x half>
  %195 = load i32, i32* %186, align 4
  %196 = bitcast i32 %195 to <2 x half>
  %197 = load i32, i32* %189, align 4
  %198 = bitcast i32 %197 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %194, <2 x half> %196, <2 x half> %198, <2 x half> %190, i32 32)
  ret void
}

-----------------------------------------------------------
Nary reassociation
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half* %12 to half addrspace(1)*
  %22 = addrspacecast i32* %8 to i32 addrspace(1)*
  %23 = addrspacecast i32* %7 to i32 addrspace(1)*
  %24 = addrspacecast i32* %1 to i32 addrspace(1)*
  %25 = addrspacecast i32* %0 to i32 addrspace(1)*
  %26 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %27 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %26, i32* %1, 1
  %28 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %27, i64 %2, 2
  %29 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %28, i64 %3, 3, 0
  %30 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %29, i64 %5, 4, 0
  %31 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %30, i64 %4, 3, 1
  %32 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %33 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %32, i32* %8, 1
  %34 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %33, i64 %9, 2
  %35 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %34, i64 %10, 3, 0
  %36 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %37 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %36, half* %13, 1
  %38 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %37, i64 %14, 2
  %39 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %38, i64 %15, 3, 0
  %40 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %39, i64 %17, 4, 0
  %41 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %40, i64 %16, 3, 1
  %42 = alloca <16 x half>, i64 1, align 32
  %43 = addrspacecast <16 x half>* %42 to <16 x half> addrspace(5)*
  %44 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %42, 0
  %45 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, <16 x half>* %42, 1
  %46 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %47, i64 1, 4, 0
  %49 = alloca <16 x half>, i64 1, align 32
  %50 = addrspacecast <16 x half>* %49 to <16 x half> addrspace(5)*
  %51 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %49, 0
  %52 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %51, <16 x half>* %49, 1
  %53 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %52, i64 0, 2
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 1, 3, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 4, 0
  %56 = alloca <8 x half>, i64 1, align 16
  %57 = addrspacecast <8 x half>* %56 to <8 x half> addrspace(5)*
  %58 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %56, 0
  %59 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %58, <8 x half>* %56, 1
  %60 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca <8 x half>, i64 1, align 16
  %64 = addrspacecast <8 x half>* %63 to <8 x half> addrspace(5)*
  %65 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %63, 0
  %66 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %65, <8 x half>* %63, 1
  %67 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %66, i64 0, 2
  %68 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %67, i64 1, 3, 0
  %69 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, i64 1, 4, 0
  %70 = alloca i32, i64 12, align 4
  %71 = addrspacecast i32* %70 to i32 addrspace(5)*
  %72 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %70, 0
  %73 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %72, i32* %70, 1
  %74 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %73, i64 0, 2
  %75 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %74, i64 2, 3, 0
  %76 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %75, i64 6, 4, 0
  %77 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %76, i64 6, 3, 1
  br label %78

78:                                               ; preds = %19
  %79 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %80 = bitcast <16 x half>* %42 to i32*
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 0
  %82 = bitcast <2 x half> %81 to i32
  store i32 %82, i32* %80, align 4
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 1
  %84 = bitcast <2 x half> %83 to i32
  %85 = getelementptr i32, i32* %80, i32 1
  store i32 %84, i32* %85, align 4
  %86 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 2
  %87 = bitcast <2 x half> %86 to i32
  %88 = getelementptr i32, i32* %80, i32 2
  store i32 %87, i32* %88, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %80, i32 3
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 4
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %80, i32 4
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 5
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %80, i32 5
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 6
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %80, i32 6
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 7
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %80, i32 7
  store i32 %102, i32* %103, align 4
  %104 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %105 = bitcast <16 x half>* %49 to i32*
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 0
  %107 = bitcast <2 x half> %106 to i32
  store i32 %107, i32* %105, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 1
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %105, i32 1
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 2
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %105, i32 2
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 3
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %105, i32 3
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 4
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %105, i32 4
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 5
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %105, i32 5
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 6
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %105, i32 6
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 7
  %127 = bitcast <2 x half> %126 to i32
  %128 = getelementptr i32, i32* %105, i32 7
  store i32 %127, i32* %128, align 4
  %129 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %130 = bitcast <8 x half>* %56 to i32*
  %131 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 0
  %132 = bitcast <2 x half> %131 to i32
  store i32 %132, i32* %130, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 1
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %130, i32 1
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 2
  %137 = bitcast <2 x half> %136 to i32
  %138 = getelementptr i32, i32* %130, i32 2
  store i32 %137, i32* %138, align 4
  %139 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 3
  %140 = bitcast <2 x half> %139 to i32
  %141 = getelementptr i32, i32* %130, i32 3
  store i32 %140, i32* %141, align 4
  %142 = load i32, i32* %80, align 4
  %143 = bitcast i32 %142 to <2 x half>
  %144 = load i32, i32* %85, align 4
  %145 = bitcast i32 %144 to <2 x half>
  %146 = load i32, i32* %88, align 4
  %147 = bitcast i32 %146 to <2 x half>
  %148 = load i32, i32* %91, align 4
  %149 = bitcast i32 %148 to <2 x half>
  %150 = load i32, i32* %94, align 4
  %151 = bitcast i32 %150 to <2 x half>
  %152 = load i32, i32* %97, align 4
  %153 = bitcast i32 %152 to <2 x half>
  %154 = load i32, i32* %100, align 4
  %155 = bitcast i32 %154 to <2 x half>
  %156 = load i32, i32* %103, align 4
  %157 = bitcast i32 %156 to <2 x half>
  %158 = load i32, i32* %105, align 4
  %159 = bitcast i32 %158 to <2 x half>
  %160 = load i32, i32* %110, align 4
  %161 = bitcast i32 %160 to <2 x half>
  %162 = load i32, i32* %113, align 4
  %163 = bitcast i32 %162 to <2 x half>
  %164 = load i32, i32* %116, align 4
  %165 = bitcast i32 %164 to <2 x half>
  %166 = load i32, i32* %119, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %122, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %125, align 4
  %171 = bitcast i32 %170 to <2 x half>
  %172 = load i32, i32* %128, align 4
  %173 = bitcast i32 %172 to <2 x half>
  %174 = load i32, i32* %130, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %135, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %138, align 4
  %179 = bitcast i32 %178 to <2 x half>
  %180 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %143, <2 x half> %145, <2 x half> %147, <2 x half> %149, <2 x half> %151, <2 x half> %153, <2 x half> %155, <2 x half> %157, <2 x half> %159, <2 x half> %161, <2 x half> %163, <2 x half> %165, <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %173, <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %139)
  %181 = bitcast <8 x half>* %63 to i32*
  %182 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 0
  %183 = bitcast <2 x half> %182 to i32
  store i32 %183, i32* %181, align 4
  %184 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 1
  %185 = bitcast <2 x half> %184 to i32
  %186 = getelementptr i32, i32* %181, i32 1
  store i32 %185, i32* %186, align 4
  %187 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 2
  %188 = bitcast <2 x half> %187 to i32
  %189 = getelementptr i32, i32* %181, i32 2
  store i32 %188, i32* %189, align 4
  %190 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 3
  %191 = bitcast <2 x half> %190 to i32
  %192 = getelementptr i32, i32* %181, i32 3
  store i32 %191, i32* %192, align 4
  %193 = load i32, i32* %181, align 4
  %194 = bitcast i32 %193 to <2 x half>
  %195 = load i32, i32* %186, align 4
  %196 = bitcast i32 %195 to <2 x half>
  %197 = load i32, i32* %189, align 4
  %198 = bitcast i32 %197 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %194, <2 x half> %196, <2 x half> %198, <2 x half> %190, i32 32)
  ret void
}

-----------------------------------------------------------
Early CSE
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = addrspacecast half* %13 to half addrspace(1)*
  %21 = addrspacecast half* %12 to half addrspace(1)*
  %22 = addrspacecast i32* %8 to i32 addrspace(1)*
  %23 = addrspacecast i32* %7 to i32 addrspace(1)*
  %24 = addrspacecast i32* %1 to i32 addrspace(1)*
  %25 = addrspacecast i32* %0 to i32 addrspace(1)*
  %26 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %27 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %26, i32* %1, 1
  %28 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %27, i64 %2, 2
  %29 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %28, i64 %3, 3, 0
  %30 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %29, i64 %5, 4, 0
  %31 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %30, i64 %4, 3, 1
  %32 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %33 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %32, i32* %8, 1
  %34 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %33, i64 %9, 2
  %35 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %34, i64 %10, 3, 0
  %36 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %37 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %36, half* %13, 1
  %38 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %37, i64 %14, 2
  %39 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %38, i64 %15, 3, 0
  %40 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %39, i64 %17, 4, 0
  %41 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %40, i64 %16, 3, 1
  %42 = alloca <16 x half>, i64 1, align 32
  %43 = addrspacecast <16 x half>* %42 to <16 x half> addrspace(5)*
  %44 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %42, 0
  %45 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %44, <16 x half>* %42, 1
  %46 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %47, i64 1, 4, 0
  %49 = alloca <16 x half>, i64 1, align 32
  %50 = addrspacecast <16 x half>* %49 to <16 x half> addrspace(5)*
  %51 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %49, 0
  %52 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %51, <16 x half>* %49, 1
  %53 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %52, i64 0, 2
  %54 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %53, i64 1, 3, 0
  %55 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %54, i64 1, 4, 0
  %56 = alloca <8 x half>, i64 1, align 16
  %57 = addrspacecast <8 x half>* %56 to <8 x half> addrspace(5)*
  %58 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %56, 0
  %59 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %58, <8 x half>* %56, 1
  %60 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %59, i64 0, 2
  %61 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %60, i64 1, 3, 0
  %62 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %61, i64 1, 4, 0
  %63 = alloca <8 x half>, i64 1, align 16
  %64 = addrspacecast <8 x half>* %63 to <8 x half> addrspace(5)*
  %65 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %63, 0
  %66 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %65, <8 x half>* %63, 1
  %67 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %66, i64 0, 2
  %68 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %67, i64 1, 3, 0
  %69 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %68, i64 1, 4, 0
  %70 = alloca i32, i64 12, align 4
  %71 = addrspacecast i32* %70 to i32 addrspace(5)*
  %72 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %70, 0
  %73 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %72, i32* %70, 1
  %74 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %73, i64 0, 2
  %75 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %74, i64 2, 3, 0
  %76 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %75, i64 6, 4, 0
  %77 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %76, i64 6, 3, 1
  br label %78

78:                                               ; preds = %19
  %79 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %80 = bitcast <16 x half>* %42 to i32*
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 0
  %82 = bitcast <2 x half> %81 to i32
  store i32 %82, i32* %80, align 4
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 1
  %84 = bitcast <2 x half> %83 to i32
  %85 = getelementptr i32, i32* %80, i32 1
  store i32 %84, i32* %85, align 4
  %86 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 2
  %87 = bitcast <2 x half> %86 to i32
  %88 = getelementptr i32, i32* %80, i32 2
  store i32 %87, i32* %88, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %80, i32 3
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 4
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %80, i32 4
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 5
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %80, i32 5
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 6
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %80, i32 6
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %79, 7
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %80, i32 7
  store i32 %102, i32* %103, align 4
  %104 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %105 = bitcast <16 x half>* %49 to i32*
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 0
  %107 = bitcast <2 x half> %106 to i32
  store i32 %107, i32* %105, align 4
  %108 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 1
  %109 = bitcast <2 x half> %108 to i32
  %110 = getelementptr i32, i32* %105, i32 1
  store i32 %109, i32* %110, align 4
  %111 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 2
  %112 = bitcast <2 x half> %111 to i32
  %113 = getelementptr i32, i32* %105, i32 2
  store i32 %112, i32* %113, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 3
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %105, i32 3
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 4
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %105, i32 4
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 5
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %105, i32 5
  store i32 %121, i32* %122, align 4
  %123 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 6
  %124 = bitcast <2 x half> %123 to i32
  %125 = getelementptr i32, i32* %105, i32 6
  store i32 %124, i32* %125, align 4
  %126 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %104, 7
  %127 = bitcast <2 x half> %126 to i32
  %128 = getelementptr i32, i32* %105, i32 7
  store i32 %127, i32* %128, align 4
  %129 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %130 = bitcast <8 x half>* %56 to i32*
  %131 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 0
  %132 = bitcast <2 x half> %131 to i32
  store i32 %132, i32* %130, align 4
  %133 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 1
  %134 = bitcast <2 x half> %133 to i32
  %135 = getelementptr i32, i32* %130, i32 1
  store i32 %134, i32* %135, align 4
  %136 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 2
  %137 = bitcast <2 x half> %136 to i32
  %138 = getelementptr i32, i32* %130, i32 2
  store i32 %137, i32* %138, align 4
  %139 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %129, 3
  %140 = bitcast <2 x half> %139 to i32
  %141 = getelementptr i32, i32* %130, i32 3
  store i32 %140, i32* %141, align 4
  %142 = load i32, i32* %80, align 4
  %143 = bitcast i32 %142 to <2 x half>
  %144 = load i32, i32* %85, align 4
  %145 = bitcast i32 %144 to <2 x half>
  %146 = load i32, i32* %88, align 4
  %147 = bitcast i32 %146 to <2 x half>
  %148 = load i32, i32* %91, align 4
  %149 = bitcast i32 %148 to <2 x half>
  %150 = load i32, i32* %94, align 4
  %151 = bitcast i32 %150 to <2 x half>
  %152 = load i32, i32* %97, align 4
  %153 = bitcast i32 %152 to <2 x half>
  %154 = load i32, i32* %100, align 4
  %155 = bitcast i32 %154 to <2 x half>
  %156 = load i32, i32* %103, align 4
  %157 = bitcast i32 %156 to <2 x half>
  %158 = load i32, i32* %105, align 4
  %159 = bitcast i32 %158 to <2 x half>
  %160 = load i32, i32* %110, align 4
  %161 = bitcast i32 %160 to <2 x half>
  %162 = load i32, i32* %113, align 4
  %163 = bitcast i32 %162 to <2 x half>
  %164 = load i32, i32* %116, align 4
  %165 = bitcast i32 %164 to <2 x half>
  %166 = load i32, i32* %119, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %122, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %125, align 4
  %171 = bitcast i32 %170 to <2 x half>
  %172 = load i32, i32* %128, align 4
  %173 = bitcast i32 %172 to <2 x half>
  %174 = load i32, i32* %130, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %135, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %138, align 4
  %179 = bitcast i32 %178 to <2 x half>
  %180 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %143, <2 x half> %145, <2 x half> %147, <2 x half> %149, <2 x half> %151, <2 x half> %153, <2 x half> %155, <2 x half> %157, <2 x half> %159, <2 x half> %161, <2 x half> %163, <2 x half> %165, <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %173, <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %139)
  %181 = bitcast <8 x half>* %63 to i32*
  %182 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 0
  %183 = bitcast <2 x half> %182 to i32
  store i32 %183, i32* %181, align 4
  %184 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 1
  %185 = bitcast <2 x half> %184 to i32
  %186 = getelementptr i32, i32* %181, i32 1
  store i32 %185, i32* %186, align 4
  %187 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 2
  %188 = bitcast <2 x half> %187 to i32
  %189 = getelementptr i32, i32* %181, i32 2
  store i32 %188, i32* %189, align 4
  %190 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %180, 3
  %191 = bitcast <2 x half> %190 to i32
  %192 = getelementptr i32, i32* %181, i32 3
  store i32 %191, i32* %192, align 4
  %193 = load i32, i32* %181, align 4
  %194 = bitcast i32 %193 to <2 x half>
  %195 = load i32, i32* %186, align 4
  %196 = bitcast i32 %195 to <2 x half>
  %197 = load i32, i32* %189, align 4
  %198 = bitcast i32 %197 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %194, <2 x half> %196, <2 x half> %198, <2 x half> %190, i32 32)
  ret void
}

-----------------------------------------------------------
Basic Alias Analysis (stateless AA impl)
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Canonicalize natural loops
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Scalar Evolution Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Loop Pass Manager
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Basic Alias Analysis (stateless AA impl)
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Function Alias Analysis Results
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Merge contiguous icmps into a memcmp
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Natural Loop Information
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Lazy Branch Probability Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Lazy Block Frequency Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Expand memcmp() to load/stores
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Lower Garbage Collection Instructions
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Shadow Stack GC Lowering
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Lower constant intrinsics
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Remove unreachable blocks from the CFG
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Dominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Natural Loop Information
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Post-Dominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Branch Probability Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Block Frequency Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Constant Hoisting
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Partially inline calls to library functions
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Instrument function entry/exit with calls to e.g. mcount() (post inlining)
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Scalarize Masked Memory Intrinsics
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Expand reduction intrinsics
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Dominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Early CSE
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %23, i64 %5, 4, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %26 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %25, i32* %8, 1
  %27 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %26, i64 %9, 2
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, half* %13, 1
  %30 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %29, i64 %14, 2
  %31 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %30, i64 %15, 3, 0
  %32 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %31, i64 %17, 4, 0
  %33 = alloca <16 x half>, i64 1, align 32
  %34 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %33, 0
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %34, <16 x half>* %33, 1
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, i64 0, 2
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 1, 3, 0
  %38 = alloca <16 x half>, i64 1, align 32
  %39 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %38, 0
  %40 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %39, <16 x half>* %38, 1
  %41 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %41, i64 1, 3, 0
  %43 = alloca <8 x half>, i64 1, align 16
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %43, 0
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, <8 x half>* %43, 1
  %46 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 0, 2
  %47 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 3, 0
  %48 = alloca <8 x half>, i64 1, align 16
  %49 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %48, 0
  %50 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %49, <8 x half>* %48, 1
  %51 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2
  %52 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 1, 3, 0
  %53 = alloca i32, i64 12, align 4
  %54 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %53, 0
  %55 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %54, i32* %53, 1
  %56 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %55, i64 0, 2
  %57 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %56, i64 2, 3, 0
  %58 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %57, i64 6, 4, 0
  br label %59

59:                                               ; preds = %19
  %60 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %61 = bitcast <16 x half>* %33 to i32*
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 0
  %63 = bitcast <2 x half> %62 to i32
  store i32 %63, i32* %61, align 4
  %64 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 1
  %65 = bitcast <2 x half> %64 to i32
  %66 = getelementptr i32, i32* %61, i32 1
  store i32 %65, i32* %66, align 4
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 2
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %61, i32 2
  store i32 %68, i32* %69, align 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 3
  %71 = bitcast <2 x half> %70 to i32
  %72 = getelementptr i32, i32* %61, i32 3
  store i32 %71, i32* %72, align 4
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 4
  %74 = bitcast <2 x half> %73 to i32
  %75 = getelementptr i32, i32* %61, i32 4
  store i32 %74, i32* %75, align 4
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 5
  %77 = bitcast <2 x half> %76 to i32
  %78 = getelementptr i32, i32* %61, i32 5
  store i32 %77, i32* %78, align 4
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 6
  %80 = bitcast <2 x half> %79 to i32
  %81 = getelementptr i32, i32* %61, i32 6
  store i32 %80, i32* %81, align 4
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %60, 7
  %83 = bitcast <2 x half> %82 to i32
  %84 = getelementptr i32, i32* %61, i32 7
  store i32 %83, i32* %84, align 4
  %85 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %86 = bitcast <16 x half>* %38 to i32*
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 0
  %88 = bitcast <2 x half> %87 to i32
  store i32 %88, i32* %86, align 4
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 1
  %90 = bitcast <2 x half> %89 to i32
  %91 = getelementptr i32, i32* %86, i32 1
  store i32 %90, i32* %91, align 4
  %92 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 2
  %93 = bitcast <2 x half> %92 to i32
  %94 = getelementptr i32, i32* %86, i32 2
  store i32 %93, i32* %94, align 4
  %95 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 3
  %96 = bitcast <2 x half> %95 to i32
  %97 = getelementptr i32, i32* %86, i32 3
  store i32 %96, i32* %97, align 4
  %98 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 4
  %99 = bitcast <2 x half> %98 to i32
  %100 = getelementptr i32, i32* %86, i32 4
  store i32 %99, i32* %100, align 4
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 5
  %102 = bitcast <2 x half> %101 to i32
  %103 = getelementptr i32, i32* %86, i32 5
  store i32 %102, i32* %103, align 4
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 6
  %105 = bitcast <2 x half> %104 to i32
  %106 = getelementptr i32, i32* %86, i32 6
  store i32 %105, i32* %106, align 4
  %107 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %85, 7
  %108 = bitcast <2 x half> %107 to i32
  %109 = getelementptr i32, i32* %86, i32 7
  store i32 %108, i32* %109, align 4
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %43 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  store i32 %113, i32* %111, align 4
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = getelementptr i32, i32* %111, i32 1
  store i32 %115, i32* %116, align 4
  %117 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %118 = bitcast <2 x half> %117 to i32
  %119 = getelementptr i32, i32* %111, i32 2
  store i32 %118, i32* %119, align 4
  %120 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %121 = bitcast <2 x half> %120 to i32
  %122 = getelementptr i32, i32* %111, i32 3
  store i32 %121, i32* %122, align 4
  %123 = load i32, i32* %61, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %66, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %69, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %72, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %75, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %78, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %81, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %84, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %86, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %91, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %94, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %97, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %100, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %103, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %106, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = load i32, i32* %109, align 4
  %154 = bitcast i32 %153 to <2 x half>
  %155 = load i32, i32* %111, align 4
  %156 = bitcast i32 %155 to <2 x half>
  %157 = load i32, i32* %116, align 4
  %158 = bitcast i32 %157 to <2 x half>
  %159 = load i32, i32* %119, align 4
  %160 = bitcast i32 %159 to <2 x half>
  %161 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %154, <2 x half> %156, <2 x half> %158, <2 x half> %160, <2 x half> %120)
  %162 = bitcast <8 x half>* %48 to i32*
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 0
  %164 = bitcast <2 x half> %163 to i32
  store i32 %164, i32* %162, align 4
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 1
  %166 = bitcast <2 x half> %165 to i32
  %167 = getelementptr i32, i32* %162, i32 1
  store i32 %166, i32* %167, align 4
  %168 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 2
  %169 = bitcast <2 x half> %168 to i32
  %170 = getelementptr i32, i32* %162, i32 2
  store i32 %169, i32* %170, align 4
  %171 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %161, 3
  %172 = bitcast <2 x half> %171 to i32
  %173 = getelementptr i32, i32* %162, i32 3
  store i32 %172, i32* %173, align 4
  %174 = load i32, i32* %162, align 4
  %175 = bitcast i32 %174 to <2 x half>
  %176 = load i32, i32* %167, align 4
  %177 = bitcast i32 %176 to <2 x half>
  %178 = load i32, i32* %170, align 4
  %179 = bitcast i32 %178 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %175, <2 x half> %177, <2 x half> %179, <2 x half> %171, i32 32)
  ret void
}

-----------------------------------------------------------
Basic Alias Analysis (stateless AA impl)
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  store i32 %55, i32* %53, align 4
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = getelementptr i32, i32* %53, i32 1
  store i32 %57, i32* %58, align 4
  %59 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %60 = bitcast <2 x half> %59 to i32
  %61 = getelementptr i32, i32* %53, i32 2
  store i32 %60, i32* %61, align 4
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %63 = bitcast <2 x half> %62 to i32
  %64 = getelementptr i32, i32* %53, i32 3
  store i32 %63, i32* %64, align 4
  %65 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %66 = bitcast <2 x half> %65 to i32
  %67 = getelementptr i32, i32* %53, i32 4
  store i32 %66, i32* %67, align 4
  %68 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %69 = bitcast <2 x half> %68 to i32
  %70 = getelementptr i32, i32* %53, i32 5
  store i32 %69, i32* %70, align 4
  %71 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %72 = bitcast <2 x half> %71 to i32
  %73 = getelementptr i32, i32* %53, i32 6
  store i32 %72, i32* %73, align 4
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = getelementptr i32, i32* %53, i32 7
  store i32 %75, i32* %76, align 4
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = bitcast <16 x half>* %34 to i32*
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %80 = bitcast <2 x half> %79 to i32
  store i32 %80, i32* %78, align 4
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %82 = bitcast <2 x half> %81 to i32
  %83 = getelementptr i32, i32* %78, i32 1
  store i32 %82, i32* %83, align 4
  %84 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %85 = bitcast <2 x half> %84 to i32
  %86 = getelementptr i32, i32* %78, i32 2
  store i32 %85, i32* %86, align 4
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %88 = bitcast <2 x half> %87 to i32
  %89 = getelementptr i32, i32* %78, i32 3
  store i32 %88, i32* %89, align 4
  %90 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %91 = bitcast <2 x half> %90 to i32
  %92 = getelementptr i32, i32* %78, i32 4
  store i32 %91, i32* %92, align 4
  %93 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %94 = bitcast <2 x half> %93 to i32
  %95 = getelementptr i32, i32* %78, i32 5
  store i32 %94, i32* %95, align 4
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %78, i32 6
  store i32 %97, i32* %98, align 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %100 = bitcast <2 x half> %99 to i32
  %101 = getelementptr i32, i32* %78, i32 7
  store i32 %100, i32* %101, align 4
  %102 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %103 = bitcast <8 x half>* %38 to i32*
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 0
  %105 = bitcast <2 x half> %104 to i32
  store i32 %105, i32* %103, align 4
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 1
  %107 = bitcast <2 x half> %106 to i32
  %108 = getelementptr i32, i32* %103, i32 1
  store i32 %107, i32* %108, align 4
  %109 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 2
  %110 = bitcast <2 x half> %109 to i32
  %111 = getelementptr i32, i32* %103, i32 2
  store i32 %110, i32* %111, align 4
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 3
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %103, i32 3
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %53, align 4
  %116 = bitcast i32 %115 to <2 x half>
  %117 = load i32, i32* %58, align 4
  %118 = bitcast i32 %117 to <2 x half>
  %119 = load i32, i32* %61, align 4
  %120 = bitcast i32 %119 to <2 x half>
  %121 = load i32, i32* %64, align 4
  %122 = bitcast i32 %121 to <2 x half>
  %123 = load i32, i32* %67, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %70, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %73, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %76, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %78, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %83, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %86, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %89, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %92, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %95, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %98, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %101, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %103, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %108, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %111, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %116, <2 x half> %118, <2 x half> %120, <2 x half> %122, <2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %112)
  %154 = bitcast <8 x half>* %42 to i32*
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %156 = bitcast <2 x half> %155 to i32
  store i32 %156, i32* %154, align 4
  %157 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %158 = bitcast <2 x half> %157 to i32
  %159 = getelementptr i32, i32* %154, i32 1
  store i32 %158, i32* %159, align 4
  %160 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %161 = bitcast <2 x half> %160 to i32
  %162 = getelementptr i32, i32* %154, i32 2
  store i32 %161, i32* %162, align 4
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %164 = bitcast <2 x half> %163 to i32
  %165 = getelementptr i32, i32* %154, i32 3
  store i32 %164, i32* %165, align 4
  %166 = load i32, i32* %154, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %159, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %162, align 4
  %171 = bitcast i32 %170 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %163, i32 32)
  ret void
}

-----------------------------------------------------------
Function Alias Analysis Results
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  store i32 %55, i32* %53, align 4
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = getelementptr i32, i32* %53, i32 1
  store i32 %57, i32* %58, align 4
  %59 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %60 = bitcast <2 x half> %59 to i32
  %61 = getelementptr i32, i32* %53, i32 2
  store i32 %60, i32* %61, align 4
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %63 = bitcast <2 x half> %62 to i32
  %64 = getelementptr i32, i32* %53, i32 3
  store i32 %63, i32* %64, align 4
  %65 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %66 = bitcast <2 x half> %65 to i32
  %67 = getelementptr i32, i32* %53, i32 4
  store i32 %66, i32* %67, align 4
  %68 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %69 = bitcast <2 x half> %68 to i32
  %70 = getelementptr i32, i32* %53, i32 5
  store i32 %69, i32* %70, align 4
  %71 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %72 = bitcast <2 x half> %71 to i32
  %73 = getelementptr i32, i32* %53, i32 6
  store i32 %72, i32* %73, align 4
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = getelementptr i32, i32* %53, i32 7
  store i32 %75, i32* %76, align 4
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = bitcast <16 x half>* %34 to i32*
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %80 = bitcast <2 x half> %79 to i32
  store i32 %80, i32* %78, align 4
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %82 = bitcast <2 x half> %81 to i32
  %83 = getelementptr i32, i32* %78, i32 1
  store i32 %82, i32* %83, align 4
  %84 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %85 = bitcast <2 x half> %84 to i32
  %86 = getelementptr i32, i32* %78, i32 2
  store i32 %85, i32* %86, align 4
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %88 = bitcast <2 x half> %87 to i32
  %89 = getelementptr i32, i32* %78, i32 3
  store i32 %88, i32* %89, align 4
  %90 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %91 = bitcast <2 x half> %90 to i32
  %92 = getelementptr i32, i32* %78, i32 4
  store i32 %91, i32* %92, align 4
  %93 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %94 = bitcast <2 x half> %93 to i32
  %95 = getelementptr i32, i32* %78, i32 5
  store i32 %94, i32* %95, align 4
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %78, i32 6
  store i32 %97, i32* %98, align 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %100 = bitcast <2 x half> %99 to i32
  %101 = getelementptr i32, i32* %78, i32 7
  store i32 %100, i32* %101, align 4
  %102 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %103 = bitcast <8 x half>* %38 to i32*
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 0
  %105 = bitcast <2 x half> %104 to i32
  store i32 %105, i32* %103, align 4
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 1
  %107 = bitcast <2 x half> %106 to i32
  %108 = getelementptr i32, i32* %103, i32 1
  store i32 %107, i32* %108, align 4
  %109 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 2
  %110 = bitcast <2 x half> %109 to i32
  %111 = getelementptr i32, i32* %103, i32 2
  store i32 %110, i32* %111, align 4
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 3
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %103, i32 3
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %53, align 4
  %116 = bitcast i32 %115 to <2 x half>
  %117 = load i32, i32* %58, align 4
  %118 = bitcast i32 %117 to <2 x half>
  %119 = load i32, i32* %61, align 4
  %120 = bitcast i32 %119 to <2 x half>
  %121 = load i32, i32* %64, align 4
  %122 = bitcast i32 %121 to <2 x half>
  %123 = load i32, i32* %67, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %70, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %73, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %76, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %78, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %83, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %86, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %89, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %92, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %95, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %98, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %101, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %103, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %108, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %111, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %116, <2 x half> %118, <2 x half> %120, <2 x half> %122, <2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %112)
  %154 = bitcast <8 x half>* %42 to i32*
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %156 = bitcast <2 x half> %155 to i32
  store i32 %156, i32* %154, align 4
  %157 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %158 = bitcast <2 x half> %157 to i32
  %159 = getelementptr i32, i32* %154, i32 1
  store i32 %158, i32* %159, align 4
  %160 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %161 = bitcast <2 x half> %160 to i32
  %162 = getelementptr i32, i32* %154, i32 2
  store i32 %161, i32* %162, align 4
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %164 = bitcast <2 x half> %163 to i32
  %165 = getelementptr i32, i32* %154, i32 3
  store i32 %164, i32* %165, align 4
  %166 = load i32, i32* %154, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %159, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %162, align 4
  %171 = bitcast i32 %170 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %163, i32 32)
  ret void
}

-----------------------------------------------------------
Natural Loop Information
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  store i32 %55, i32* %53, align 4
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = getelementptr i32, i32* %53, i32 1
  store i32 %57, i32* %58, align 4
  %59 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %60 = bitcast <2 x half> %59 to i32
  %61 = getelementptr i32, i32* %53, i32 2
  store i32 %60, i32* %61, align 4
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %63 = bitcast <2 x half> %62 to i32
  %64 = getelementptr i32, i32* %53, i32 3
  store i32 %63, i32* %64, align 4
  %65 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %66 = bitcast <2 x half> %65 to i32
  %67 = getelementptr i32, i32* %53, i32 4
  store i32 %66, i32* %67, align 4
  %68 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %69 = bitcast <2 x half> %68 to i32
  %70 = getelementptr i32, i32* %53, i32 5
  store i32 %69, i32* %70, align 4
  %71 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %72 = bitcast <2 x half> %71 to i32
  %73 = getelementptr i32, i32* %53, i32 6
  store i32 %72, i32* %73, align 4
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = getelementptr i32, i32* %53, i32 7
  store i32 %75, i32* %76, align 4
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = bitcast <16 x half>* %34 to i32*
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %80 = bitcast <2 x half> %79 to i32
  store i32 %80, i32* %78, align 4
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %82 = bitcast <2 x half> %81 to i32
  %83 = getelementptr i32, i32* %78, i32 1
  store i32 %82, i32* %83, align 4
  %84 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %85 = bitcast <2 x half> %84 to i32
  %86 = getelementptr i32, i32* %78, i32 2
  store i32 %85, i32* %86, align 4
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %88 = bitcast <2 x half> %87 to i32
  %89 = getelementptr i32, i32* %78, i32 3
  store i32 %88, i32* %89, align 4
  %90 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %91 = bitcast <2 x half> %90 to i32
  %92 = getelementptr i32, i32* %78, i32 4
  store i32 %91, i32* %92, align 4
  %93 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %94 = bitcast <2 x half> %93 to i32
  %95 = getelementptr i32, i32* %78, i32 5
  store i32 %94, i32* %95, align 4
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %78, i32 6
  store i32 %97, i32* %98, align 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %100 = bitcast <2 x half> %99 to i32
  %101 = getelementptr i32, i32* %78, i32 7
  store i32 %100, i32* %101, align 4
  %102 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %103 = bitcast <8 x half>* %38 to i32*
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 0
  %105 = bitcast <2 x half> %104 to i32
  store i32 %105, i32* %103, align 4
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 1
  %107 = bitcast <2 x half> %106 to i32
  %108 = getelementptr i32, i32* %103, i32 1
  store i32 %107, i32* %108, align 4
  %109 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 2
  %110 = bitcast <2 x half> %109 to i32
  %111 = getelementptr i32, i32* %103, i32 2
  store i32 %110, i32* %111, align 4
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 3
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %103, i32 3
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %53, align 4
  %116 = bitcast i32 %115 to <2 x half>
  %117 = load i32, i32* %58, align 4
  %118 = bitcast i32 %117 to <2 x half>
  %119 = load i32, i32* %61, align 4
  %120 = bitcast i32 %119 to <2 x half>
  %121 = load i32, i32* %64, align 4
  %122 = bitcast i32 %121 to <2 x half>
  %123 = load i32, i32* %67, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %70, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %73, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %76, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %78, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %83, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %86, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %89, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %92, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %95, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %98, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %101, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %103, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %108, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %111, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %116, <2 x half> %118, <2 x half> %120, <2 x half> %122, <2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %112)
  %154 = bitcast <8 x half>* %42 to i32*
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %156 = bitcast <2 x half> %155 to i32
  store i32 %156, i32* %154, align 4
  %157 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %158 = bitcast <2 x half> %157 to i32
  %159 = getelementptr i32, i32* %154, i32 1
  store i32 %158, i32* %159, align 4
  %160 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %161 = bitcast <2 x half> %160 to i32
  %162 = getelementptr i32, i32* %154, i32 2
  store i32 %161, i32* %162, align 4
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %164 = bitcast <2 x half> %163 to i32
  %165 = getelementptr i32, i32* %154, i32 3
  store i32 %164, i32* %165, align 4
  %166 = load i32, i32* %154, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %159, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %162, align 4
  %171 = bitcast i32 %170 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %163, i32 32)
  ret void
}

-----------------------------------------------------------
Scalar Evolution Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  store i32 %55, i32* %53, align 4
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = getelementptr i32, i32* %53, i32 1
  store i32 %57, i32* %58, align 4
  %59 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %60 = bitcast <2 x half> %59 to i32
  %61 = getelementptr i32, i32* %53, i32 2
  store i32 %60, i32* %61, align 4
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %63 = bitcast <2 x half> %62 to i32
  %64 = getelementptr i32, i32* %53, i32 3
  store i32 %63, i32* %64, align 4
  %65 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %66 = bitcast <2 x half> %65 to i32
  %67 = getelementptr i32, i32* %53, i32 4
  store i32 %66, i32* %67, align 4
  %68 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %69 = bitcast <2 x half> %68 to i32
  %70 = getelementptr i32, i32* %53, i32 5
  store i32 %69, i32* %70, align 4
  %71 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %72 = bitcast <2 x half> %71 to i32
  %73 = getelementptr i32, i32* %53, i32 6
  store i32 %72, i32* %73, align 4
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = getelementptr i32, i32* %53, i32 7
  store i32 %75, i32* %76, align 4
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = bitcast <16 x half>* %34 to i32*
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %80 = bitcast <2 x half> %79 to i32
  store i32 %80, i32* %78, align 4
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %82 = bitcast <2 x half> %81 to i32
  %83 = getelementptr i32, i32* %78, i32 1
  store i32 %82, i32* %83, align 4
  %84 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %85 = bitcast <2 x half> %84 to i32
  %86 = getelementptr i32, i32* %78, i32 2
  store i32 %85, i32* %86, align 4
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %88 = bitcast <2 x half> %87 to i32
  %89 = getelementptr i32, i32* %78, i32 3
  store i32 %88, i32* %89, align 4
  %90 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %91 = bitcast <2 x half> %90 to i32
  %92 = getelementptr i32, i32* %78, i32 4
  store i32 %91, i32* %92, align 4
  %93 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %94 = bitcast <2 x half> %93 to i32
  %95 = getelementptr i32, i32* %78, i32 5
  store i32 %94, i32* %95, align 4
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %78, i32 6
  store i32 %97, i32* %98, align 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %100 = bitcast <2 x half> %99 to i32
  %101 = getelementptr i32, i32* %78, i32 7
  store i32 %100, i32* %101, align 4
  %102 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %103 = bitcast <8 x half>* %38 to i32*
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 0
  %105 = bitcast <2 x half> %104 to i32
  store i32 %105, i32* %103, align 4
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 1
  %107 = bitcast <2 x half> %106 to i32
  %108 = getelementptr i32, i32* %103, i32 1
  store i32 %107, i32* %108, align 4
  %109 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 2
  %110 = bitcast <2 x half> %109 to i32
  %111 = getelementptr i32, i32* %103, i32 2
  store i32 %110, i32* %111, align 4
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 3
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %103, i32 3
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %53, align 4
  %116 = bitcast i32 %115 to <2 x half>
  %117 = load i32, i32* %58, align 4
  %118 = bitcast i32 %117 to <2 x half>
  %119 = load i32, i32* %61, align 4
  %120 = bitcast i32 %119 to <2 x half>
  %121 = load i32, i32* %64, align 4
  %122 = bitcast i32 %121 to <2 x half>
  %123 = load i32, i32* %67, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %70, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %73, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %76, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %78, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %83, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %86, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %89, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %92, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %95, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %98, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %101, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %103, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %108, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %111, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %116, <2 x half> %118, <2 x half> %120, <2 x half> %122, <2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %112)
  %154 = bitcast <8 x half>* %42 to i32*
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %156 = bitcast <2 x half> %155 to i32
  store i32 %156, i32* %154, align 4
  %157 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %158 = bitcast <2 x half> %157 to i32
  %159 = getelementptr i32, i32* %154, i32 1
  store i32 %158, i32* %159, align 4
  %160 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %161 = bitcast <2 x half> %160 to i32
  %162 = getelementptr i32, i32* %154, i32 2
  store i32 %161, i32* %162, align 4
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %164 = bitcast <2 x half> %163 to i32
  %165 = getelementptr i32, i32* %154, i32 3
  store i32 %164, i32* %165, align 4
  %166 = load i32, i32* %154, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %159, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %162, align 4
  %171 = bitcast i32 %170 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %163, i32 32)
  ret void
}

-----------------------------------------------------------
GPU Load and Store Vectorizer
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  store i32 %55, i32* %53, align 4
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = getelementptr i32, i32* %53, i32 1
  store i32 %57, i32* %58, align 4
  %59 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %60 = bitcast <2 x half> %59 to i32
  %61 = getelementptr i32, i32* %53, i32 2
  store i32 %60, i32* %61, align 4
  %62 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %63 = bitcast <2 x half> %62 to i32
  %64 = getelementptr i32, i32* %53, i32 3
  store i32 %63, i32* %64, align 4
  %65 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %66 = bitcast <2 x half> %65 to i32
  %67 = getelementptr i32, i32* %53, i32 4
  store i32 %66, i32* %67, align 4
  %68 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %69 = bitcast <2 x half> %68 to i32
  %70 = getelementptr i32, i32* %53, i32 5
  store i32 %69, i32* %70, align 4
  %71 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %72 = bitcast <2 x half> %71 to i32
  %73 = getelementptr i32, i32* %53, i32 6
  store i32 %72, i32* %73, align 4
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = getelementptr i32, i32* %53, i32 7
  store i32 %75, i32* %76, align 4
  %77 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %78 = bitcast <16 x half>* %34 to i32*
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 0
  %80 = bitcast <2 x half> %79 to i32
  store i32 %80, i32* %78, align 4
  %81 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 1
  %82 = bitcast <2 x half> %81 to i32
  %83 = getelementptr i32, i32* %78, i32 1
  store i32 %82, i32* %83, align 4
  %84 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 2
  %85 = bitcast <2 x half> %84 to i32
  %86 = getelementptr i32, i32* %78, i32 2
  store i32 %85, i32* %86, align 4
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 3
  %88 = bitcast <2 x half> %87 to i32
  %89 = getelementptr i32, i32* %78, i32 3
  store i32 %88, i32* %89, align 4
  %90 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 4
  %91 = bitcast <2 x half> %90 to i32
  %92 = getelementptr i32, i32* %78, i32 4
  store i32 %91, i32* %92, align 4
  %93 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 5
  %94 = bitcast <2 x half> %93 to i32
  %95 = getelementptr i32, i32* %78, i32 5
  store i32 %94, i32* %95, align 4
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 6
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %78, i32 6
  store i32 %97, i32* %98, align 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %77, 7
  %100 = bitcast <2 x half> %99 to i32
  %101 = getelementptr i32, i32* %78, i32 7
  store i32 %100, i32* %101, align 4
  %102 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %103 = bitcast <8 x half>* %38 to i32*
  %104 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 0
  %105 = bitcast <2 x half> %104 to i32
  store i32 %105, i32* %103, align 4
  %106 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 1
  %107 = bitcast <2 x half> %106 to i32
  %108 = getelementptr i32, i32* %103, i32 1
  store i32 %107, i32* %108, align 4
  %109 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 2
  %110 = bitcast <2 x half> %109 to i32
  %111 = getelementptr i32, i32* %103, i32 2
  store i32 %110, i32* %111, align 4
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %102, 3
  %113 = bitcast <2 x half> %112 to i32
  %114 = getelementptr i32, i32* %103, i32 3
  store i32 %113, i32* %114, align 4
  %115 = load i32, i32* %53, align 4
  %116 = bitcast i32 %115 to <2 x half>
  %117 = load i32, i32* %58, align 4
  %118 = bitcast i32 %117 to <2 x half>
  %119 = load i32, i32* %61, align 4
  %120 = bitcast i32 %119 to <2 x half>
  %121 = load i32, i32* %64, align 4
  %122 = bitcast i32 %121 to <2 x half>
  %123 = load i32, i32* %67, align 4
  %124 = bitcast i32 %123 to <2 x half>
  %125 = load i32, i32* %70, align 4
  %126 = bitcast i32 %125 to <2 x half>
  %127 = load i32, i32* %73, align 4
  %128 = bitcast i32 %127 to <2 x half>
  %129 = load i32, i32* %76, align 4
  %130 = bitcast i32 %129 to <2 x half>
  %131 = load i32, i32* %78, align 4
  %132 = bitcast i32 %131 to <2 x half>
  %133 = load i32, i32* %83, align 4
  %134 = bitcast i32 %133 to <2 x half>
  %135 = load i32, i32* %86, align 4
  %136 = bitcast i32 %135 to <2 x half>
  %137 = load i32, i32* %89, align 4
  %138 = bitcast i32 %137 to <2 x half>
  %139 = load i32, i32* %92, align 4
  %140 = bitcast i32 %139 to <2 x half>
  %141 = load i32, i32* %95, align 4
  %142 = bitcast i32 %141 to <2 x half>
  %143 = load i32, i32* %98, align 4
  %144 = bitcast i32 %143 to <2 x half>
  %145 = load i32, i32* %101, align 4
  %146 = bitcast i32 %145 to <2 x half>
  %147 = load i32, i32* %103, align 4
  %148 = bitcast i32 %147 to <2 x half>
  %149 = load i32, i32* %108, align 4
  %150 = bitcast i32 %149 to <2 x half>
  %151 = load i32, i32* %111, align 4
  %152 = bitcast i32 %151 to <2 x half>
  %153 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %116, <2 x half> %118, <2 x half> %120, <2 x half> %122, <2 x half> %124, <2 x half> %126, <2 x half> %128, <2 x half> %130, <2 x half> %132, <2 x half> %134, <2 x half> %136, <2 x half> %138, <2 x half> %140, <2 x half> %142, <2 x half> %144, <2 x half> %146, <2 x half> %148, <2 x half> %150, <2 x half> %152, <2 x half> %112)
  %154 = bitcast <8 x half>* %42 to i32*
  %155 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 0
  %156 = bitcast <2 x half> %155 to i32
  store i32 %156, i32* %154, align 4
  %157 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 1
  %158 = bitcast <2 x half> %157 to i32
  %159 = getelementptr i32, i32* %154, i32 1
  store i32 %158, i32* %159, align 4
  %160 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 2
  %161 = bitcast <2 x half> %160 to i32
  %162 = getelementptr i32, i32* %154, i32 2
  store i32 %161, i32* %162, align 4
  %163 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %153, 3
  %164 = bitcast <2 x half> %163 to i32
  %165 = getelementptr i32, i32* %154, i32 3
  store i32 %164, i32* %165, align 4
  %166 = load i32, i32* %154, align 4
  %167 = bitcast i32 %166 to <2 x half>
  %168 = load i32, i32* %159, align 4
  %169 = bitcast i32 %168 to <2 x half>
  %170 = load i32, i32* %162, align 4
  %171 = bitcast i32 %170 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %167, <2 x half> %169, <2 x half> %171, <2 x half> %163, i32 32)
  ret void
}

-----------------------------------------------------------
CodeGen Prepare
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Lower invoke and unwind, for unwindless code generators
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Remove unreachable blocks from the CFG
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Safe Stack instrumentation pass
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Insert stack protectors
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Lower aggregate copies/intrinsics into loops
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
NVPTX specific alloca hoisting
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Dominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Basic Alias Analysis (stateless AA impl)
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Function Alias Analysis Results
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Natural Loop Information
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Post-Dominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Branch Probability Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Lazy Branch Probability Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Lazy Block Frequency Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
NVPTX DAG->DAG Pattern Instruction Selection
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Finalize ISel and expand pseudo-instructions
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Lazy Machine Block Frequency Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Early Tail Duplication
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Optimize machine instruction PHIs
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Slot index numbering
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Merge disjoint stack slots
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Local Stack Slot Allocation
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Remove dead machine instructions
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
MachineDominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine Natural Loop Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine Block Frequency Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Early Machine Loop Invariant Code Motion
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
MachineDominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine Block Frequency Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine Common Subexpression Elimination
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
MachinePostDominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine code sinking
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Peephole Optimizations
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
NVPTX Proxy Register Instruction Erasure
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Process Implicit Definitions
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Remove unreachable machine basic blocks
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Live Variable Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
MachineDominator Tree Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine Natural Loop Construction
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Eliminate PHI nodes for register allocation
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Two-Address instruction pass
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Slot index numbering
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Live Interval Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Simple Register Coalescing
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine Instruction Scheduler
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Live Stack Slot Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Machine Block Frequency Analysis
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Stack Slot Coloring
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
Unnamed pass: implement Pass::getPassName()
define void @main_kernel(i32* %0, i32* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, i32* %7, i32* %8, i64 %9, i64 %10, i64 %11, half* %12, half* %13, i64 %14, i64 %15, i64 %16, i64 %17, i64 %18) {
  %20 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %0, 0
  %21 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %20, i32* %1, 1
  %22 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %21, i64 %2, 2
  %23 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %22, i64 %3, 3, 0
  %24 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } undef, i32* %7, 0
  %25 = insertvalue { i32*, i32*, i64, [1 x i64], [1 x i64] } %24, i32* %8, 1
  %26 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } undef, half* %12, 0
  %27 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %26, half* %13, 1
  %28 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %27, i64 %14, 2
  %29 = insertvalue { half*, half*, i64, [2 x i64], [2 x i64] } %28, i64 %15, 3, 0
  %30 = alloca <16 x half>, i64 1, align 32
  %31 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %30, 0
  %32 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %31, <16 x half>* %30, 1
  %33 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2
  %34 = alloca <16 x half>, i64 1, align 32
  %35 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } undef, <16 x half>* %34, 0
  %36 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %35, <16 x half>* %34, 1
  %37 = insertvalue { <16 x half>*, <16 x half>*, i64, [1 x i64], [1 x i64] } %36, i64 0, 2
  %38 = alloca <8 x half>, i64 1, align 16
  %39 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %38, 0
  %40 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %39, <8 x half>* %38, 1
  %41 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 0, 2
  %42 = alloca <8 x half>, i64 1, align 16
  %43 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } undef, <8 x half>* %42, 0
  %44 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %43, <8 x half>* %42, 1
  %45 = insertvalue { <8 x half>*, <8 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = alloca i32, i64 12, align 4
  %47 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } undef, i32* %46, 0
  %48 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %47, i32* %46, 1
  %49 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %48, i64 0, 2
  %50 = insertvalue { i32*, i32*, i64, [2 x i64], [2 x i64] } %49, i64 2, 3, 0
  br label %51

51:                                               ; preds = %19
  %52 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %53 = bitcast <16 x half>* %30 to i32*
  %54 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 0
  %55 = bitcast <2 x half> %54 to i32
  %56 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 1
  %57 = bitcast <2 x half> %56 to i32
  %58 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 2
  %59 = bitcast <2 x half> %58 to i32
  %60 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 3
  %61 = bitcast <2 x half> %60 to i32
  %62 = insertelement <4 x i32> undef, i32 %55, i32 0
  %63 = insertelement <4 x i32> %62, i32 %57, i32 1
  %64 = insertelement <4 x i32> %63, i32 %59, i32 2
  %65 = insertelement <4 x i32> %64, i32 %61, i32 3
  %66 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %65, <4 x i32>* %66, align 32
  %67 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 4
  %68 = bitcast <2 x half> %67 to i32
  %69 = getelementptr i32, i32* %53, i32 4
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 5
  %71 = bitcast <2 x half> %70 to i32
  %72 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 6
  %73 = bitcast <2 x half> %72 to i32
  %74 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %52, 7
  %75 = bitcast <2 x half> %74 to i32
  %76 = insertelement <4 x i32> undef, i32 %68, i32 0
  %77 = insertelement <4 x i32> %76, i32 %71, i32 1
  %78 = insertelement <4 x i32> %77, i32 %73, i32 2
  %79 = insertelement <4 x i32> %78, i32 %75, i32 3
  %80 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %82 = bitcast <16 x half>* %34 to i32*
  %83 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 0
  %84 = bitcast <2 x half> %83 to i32
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 1
  %86 = bitcast <2 x half> %85 to i32
  %87 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 2
  %88 = bitcast <2 x half> %87 to i32
  %89 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 3
  %90 = bitcast <2 x half> %89 to i32
  %91 = insertelement <4 x i32> undef, i32 %84, i32 0
  %92 = insertelement <4 x i32> %91, i32 %86, i32 1
  %93 = insertelement <4 x i32> %92, i32 %88, i32 2
  %94 = insertelement <4 x i32> %93, i32 %90, i32 3
  %95 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %94, <4 x i32>* %95, align 32
  %96 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 4
  %97 = bitcast <2 x half> %96 to i32
  %98 = getelementptr i32, i32* %82, i32 4
  %99 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 5
  %100 = bitcast <2 x half> %99 to i32
  %101 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 6
  %102 = bitcast <2 x half> %101 to i32
  %103 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %81, 7
  %104 = bitcast <2 x half> %103 to i32
  %105 = insertelement <4 x i32> undef, i32 %97, i32 0
  %106 = insertelement <4 x i32> %105, i32 %100, i32 1
  %107 = insertelement <4 x i32> %106, i32 %102, i32 2
  %108 = insertelement <4 x i32> %107, i32 %104, i32 3
  %109 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %108, <4 x i32>* %109, align 16
  %110 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), i32 32)
  %111 = bitcast <8 x half>* %38 to i32*
  %112 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 0
  %113 = bitcast <2 x half> %112 to i32
  %114 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 1
  %115 = bitcast <2 x half> %114 to i32
  %116 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 2
  %117 = bitcast <2 x half> %116 to i32
  %118 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %110, 3
  %119 = bitcast <2 x half> %118 to i32
  %120 = insertelement <4 x i32> undef, i32 %113, i32 0
  %121 = insertelement <4 x i32> %120, i32 %115, i32 1
  %122 = insertelement <4 x i32> %121, i32 %117, i32 2
  %123 = insertelement <4 x i32> %122, i32 %119, i32 3
  %124 = bitcast i32* %111 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 16
  %125 = bitcast i32* %53 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 32
  %127 = extractelement <4 x i32> %126, i32 0
  %128 = extractelement <4 x i32> %126, i32 1
  %129 = extractelement <4 x i32> %126, i32 2
  %130 = extractelement <4 x i32> %126, i32 3
  %131 = bitcast i32 %127 to <2 x half>
  %132 = bitcast i32 %128 to <2 x half>
  %133 = bitcast i32 %129 to <2 x half>
  %134 = bitcast i32 %130 to <2 x half>
  %135 = bitcast i32* %69 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = extractelement <4 x i32> %136, i32 0
  %138 = extractelement <4 x i32> %136, i32 1
  %139 = extractelement <4 x i32> %136, i32 2
  %140 = extractelement <4 x i32> %136, i32 3
  %141 = bitcast i32 %137 to <2 x half>
  %142 = bitcast i32 %138 to <2 x half>
  %143 = bitcast i32 %139 to <2 x half>
  %144 = bitcast i32 %140 to <2 x half>
  %145 = bitcast i32* %82 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 32
  %147 = extractelement <4 x i32> %146, i32 0
  %148 = extractelement <4 x i32> %146, i32 1
  %149 = extractelement <4 x i32> %146, i32 2
  %150 = extractelement <4 x i32> %146, i32 3
  %151 = bitcast i32 %147 to <2 x half>
  %152 = bitcast i32 %148 to <2 x half>
  %153 = bitcast i32 %149 to <2 x half>
  %154 = bitcast i32 %150 to <2 x half>
  %155 = bitcast i32* %98 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 16
  %157 = extractelement <4 x i32> %156, i32 0
  %158 = extractelement <4 x i32> %156, i32 1
  %159 = extractelement <4 x i32> %156, i32 2
  %160 = extractelement <4 x i32> %156, i32 3
  %161 = bitcast i32 %157 to <2 x half>
  %162 = bitcast i32 %158 to <2 x half>
  %163 = bitcast i32 %159 to <2 x half>
  %164 = bitcast i32 %160 to <2 x half>
  %165 = bitcast i32* %111 to <3 x i32>*
  %166 = load <3 x i32>, <3 x i32>* %165, align 16
  %167 = extractelement <3 x i32> %166, i32 0
  %168 = extractelement <3 x i32> %166, i32 1
  %169 = extractelement <3 x i32> %166, i32 2
  %170 = bitcast i32 %167 to <2 x half>
  %171 = bitcast i32 %168 to <2 x half>
  %172 = bitcast i32 %169 to <2 x half>
  %173 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %131, <2 x half> %132, <2 x half> %133, <2 x half> %134, <2 x half> %141, <2 x half> %142, <2 x half> %143, <2 x half> %144, <2 x half> %151, <2 x half> %152, <2 x half> %153, <2 x half> %154, <2 x half> %161, <2 x half> %162, <2 x half> %163, <2 x half> %164, <2 x half> %170, <2 x half> %171, <2 x half> %172, <2 x half> %118)
  %174 = bitcast <8 x half>* %42 to i32*
  %175 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 0
  %176 = bitcast <2 x half> %175 to i32
  %177 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 1
  %178 = bitcast <2 x half> %177 to i32
  %179 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 2
  %180 = bitcast <2 x half> %179 to i32
  %181 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %173, 3
  %182 = bitcast <2 x half> %181 to i32
  %183 = insertelement <4 x i32> undef, i32 %176, i32 0
  %184 = insertelement <4 x i32> %183, i32 %178, i32 1
  %185 = insertelement <4 x i32> %184, i32 %180, i32 2
  %186 = insertelement <4 x i32> %185, i32 %182, i32 3
  %187 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %187, align 16
  %188 = bitcast i32* %174 to <3 x i32>*
  %189 = load <3 x i32>, <3 x i32>* %188, align 16
  %190 = extractelement <3 x i32> %189, i32 0
  %191 = extractelement <3 x i32> %189, i32 1
  %192 = extractelement <3 x i32> %189, i32 2
  %193 = bitcast i32 %190 to <2 x half>
  %194 = bitcast i32 %191 to <2 x half>
  %195 = bitcast i32 %192 to <2 x half>
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i32(i32 addrspace(3)* bitcast (half addrspace(3)* getelementptr inbounds ([1024 x half], [1024 x half] addrspace(3)* @__wg_main_kernel_0, i32 0, i64 528) to i32 addrspace(3)*), <2 x half> %193, <2 x half> %194, <2 x half> %195, <2 x half> %181, i32 32)
  ret void
}

-----------------------------------------------------------
mlir-cuda-runner: /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/ADT/ilist_iterator.h:138: llvm::ilist_iterator::reference llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::MachineInstr, true, true, void>, false, false>::operator*() const [OptionsT = llvm::ilist_detail::node_options<llvm::MachineInstr, true, true, void>, IsReverse = false, IsConst = false]: Assertion `!NodePtr->isKnownSentinel()' failed.
PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace.
Stack dump:
0.	Program arguments: mlir-cuda-runner --shared-libs=/home/navdeep/work/GPU_GEMM/llvm-project-mcl//build/lib/libcuda-runtime-wrappers.so,/home/navdeep/work/GPU_GEMM/llvm-project-mcl//build/lib/libmlir_runner_utils.so --entry-point-result=void cudaRunnerTestOutlinedMod.mlir
1.	2.	Running pass 'Function Pass Manager' on module 'LLVMDialectModule'.
3.	Running pass 'Unnamed pass: implement Pass::getPassName()' on function '@main_kernel'
 #0 0x00007fd7e62228ba llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/Support/Unix/Signals.inc:563:11
 #1 0x00007fd7e6222a8b PrintStackTraceSignalHandler(void*) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/Support/Unix/Signals.inc:630:1
 #2 0x00007fd7e622107b llvm::sys::RunSignalHandlers() /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/Support/Signals.cpp:70:5
 #3 0x00007fd7e62231dd SignalHandler(int) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/Support/Unix/Signals.inc:405:1
 #4 0x00007fd7f0421dd0 __restore_rt (/lib64/libpthread.so.0+0x12dd0)
 #5 0x00007fd7e518170f raise (/lib64/libc.so.6+0x3770f)
 #6 0x00007fd7e516bb25 abort (/lib64/libc.so.6+0x21b25)
 #7 0x00007fd7e516b9f9 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x219f9)
 #8 0x00007fd7e5179cc6 (/lib64/libc.so.6+0x2fcc6)
 #9 0x00007fd7ee158422 llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::MachineInstr, true, true, void>, false, false>::operator*() const /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/ADT/ilist_iterator.h:0:5
#10 0x00007fd7ee158382 llvm::simple_ilist<llvm::MachineInstr, llvm::ilist_sentinel_tracking<true> >::front() /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/ADT/simple_ilist.h:138:23
#11 0x00007fd7ee157604 llvm::MachineBasicBlock::front() /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/CodeGen/MachineBasicBlock.h:241:45
#12 0x00007fd7ee1571a4 llvm::NVPTXFrameLowering::emitPrologue(llvm::MachineFunction&, llvm::MachineBasicBlock&) const /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/Target/NVPTX/NVPTXFrameLowering.cpp:36:19
#13 0x00007fd7ee1bad28 (anonymous namespace)::NVPTXPrologEpilogPass::runOnMachineFunction(llvm::MachineFunction&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/Target/NVPTX/NVPTXPrologEpilogPass.cpp:91:38
#14 0x00007fd7e3be3a87 llvm::MachineFunctionPass::runOnFunction(llvm::Function&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/CodeGen/MachineFunctionPass.cpp:72:8
#15 0x00007fd7e69d37d0 llvm::FPPassManager::runOnFunction(llvm::Function&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/IR/LegacyPassManager.cpp:1444:23
#16 0x00007fd7e69d89c5 llvm::FPPassManager::runOnModule(llvm::Module&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/IR/LegacyPassManager.cpp:1490:16
#17 0x00007fd7e69d41a4 (anonymous namespace)::MPPassManager::runOnModule(llvm::Module&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/IR/LegacyPassManager.cpp:1559:23
#18 0x00007fd7e69d3cd1 llvm::legacy::PassManagerImpl::run(llvm::Module&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/IR/LegacyPassManager.cpp:543:16
#19 0x00007fd7e69d8cd1 llvm::legacy::PassManager::run(llvm::Module&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/lib/IR/LegacyPassManager.cpp:1686:3
#20 0x00007fd7f07adf6e (anonymous namespace)::GpuKernelToBlobPass::translateModuleToISA[abi:cxx11](llvm::Module&, llvm::TargetMachine&) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Conversion/GPUCommon/ConvertKernelFuncToBlob.cpp:115:3
#21 0x00007fd7f07addd1 (anonymous namespace)::GpuKernelToBlobPass::convertModuleToBlob(llvm::Module&, mlir::Location, llvm::StringRef) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Conversion/GPUCommon/ConvertKernelFuncToBlob.cpp:144:3
#22 0x00007fd7f07ad984 (anonymous namespace)::GpuKernelToBlobPass::translateGPUModuleToBinaryAnnotation(llvm::Module&, mlir::Location, llvm::StringRef) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Conversion/GPUCommon/ConvertKernelFuncToBlob.cpp:152:8
#23 0x00007fd7f07ad619 (anonymous namespace)::GpuKernelToBlobPass::runOnOperation() /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Conversion/GPUCommon/ConvertKernelFuncToBlob.cpp:72:25
#24 0x00007fd7e960b3cd mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:370:21
#25 0x00007fd7e960b94d mlir::detail::OpToOpPassAdaptor::runPipeline(llvm::iterator_range<llvm::pointee_iterator<std::unique_ptr<mlir::Pass, std::default_delete<mlir::Pass> >*, mlir::Pass> >, mlir::Operation*, mlir::AnalysisManager, bool, mlir::PassInstrumentor*, mlir::PassInstrumentation::PipelineParentInfo const*) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:410:16
#26 0x00007fd7e9613092 mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8::operator()(llvm::MutableArrayRef<mlir::OpPassManager>) const /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:582:15
#27 0x00007fd7e9612a72 mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8 std::for_each<llvm::SmallVector<mlir::OpPassManager, 1u>*, mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8>(llvm::SmallVector<mlir::OpPassManager, 1u>*, llvm::SmallVector<mlir::OpPassManager, 1u>*, mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_algo.h:3881:33
#28 0x00007fd7e9612a00 void llvm::parallel::detail::parallel_for_each<llvm::SmallVector<mlir::OpPassManager, 1u>*, mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8>(llvm::SmallVector<mlir::OpPassManager, 1u>*, llvm::SmallVector<mlir::OpPassManager, 1u>*, mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/Support/Parallel.h:144:1
#29 0x00007fd7e960cad4 void llvm::parallelForEach<llvm::SmallVector<mlir::OpPassManager, 1u>*, mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8>(llvm::SmallVector<mlir::OpPassManager, 1u>*, llvm::SmallVector<mlir::OpPassManager, 1u>*, mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool)::$_8) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/Support/Parallel.h:234:5
#30 0x00007fd7e960c443 mlir::detail::OpToOpPassAdaptor::runOnOperationAsyncImpl(bool) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:600:7
#31 0x00007fd7e960b62d mlir::detail::OpToOpPassAdaptor::runOnOperation(bool) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:485:5
#32 0x00007fd7e960b3bb mlir::detail::OpToOpPassAdaptor::run(mlir::Pass*, mlir::Operation*, mlir::AnalysisManager, bool) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:367:5
#33 0x00007fd7e960b94d mlir::detail::OpToOpPassAdaptor::runPipeline(llvm::iterator_range<llvm::pointee_iterator<std::unique_ptr<mlir::Pass, std::default_delete<mlir::Pass> >*, mlir::Pass> >, mlir::Operation*, mlir::AnalysisManager, bool, mlir::PassInstrumentor*, mlir::PassInstrumentation::PipelineParentInfo const*) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:410:16
#34 0x00007fd7e960d7e7 mlir::PassManager::run(mlir::Operation*) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/Pass/Pass.cpp:815:13
#35 0x0000000000208b1c runMLIRPasses(mlir::ModuleOp) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/tools/mlir-cuda-runner/mlir-cuda-runner.cpp:122:13
#36 0x000000000020c282 mlir::LogicalResult llvm::function_ref<mlir::LogicalResult (mlir::ModuleOp)>::callback_fn<mlir::LogicalResult (mlir::ModuleOp)>(long, mlir::ModuleOp) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/ADT/STLExtras.h:185:12
#37 0x00007fd7efdb6d44 llvm::function_ref<mlir::LogicalResult (mlir::ModuleOp)>::operator()(mlir::ModuleOp) const /home/navdeep/work/GPU_GEMM/llvm-project-mcl/llvm/include/llvm/ADT/STLExtras.h:209:12
#38 0x00007fd7efdb3d9a mlir::JitRunnerMain(int, char**, mlir::JitRunnerConfig) /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/lib/ExecutionEngine/JitRunner.cpp:298:16
#39 0x00000000002087aa main /home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir/tools/mlir-cuda-runner/mlir-cuda-runner.cpp:142:3
#40 0x00007fd7e516d6a3 __libc_start_main (/lib64/libc.so.6+0x236a3)
#41 0x000000000020811e _start (/home/navdeep/work/GPU_GEMM/llvm-project-mcl/build/bin/mlir-cuda-runner+0x20811e)
