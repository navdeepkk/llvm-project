; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

declare i8* @malloc(i64)

declare void @free(i8*)

define void @main_kernel(half addrspace(3)* %0, half addrspace(3)* %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6, half addrspace(3)* %7, half addrspace(3)* %8, i64 %9, i64 %10, i64 %11, i64 %12, i64 %13) !dbg !4 {
  %15 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } undef, half addrspace(3)* %0, 0, !dbg !8
  %16 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %15, half addrspace(3)* %1, 1, !dbg !10
  %17 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %16, i64 %2, 2, !dbg !11
  %18 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %17, i64 %3, 3, 0, !dbg !12
  %19 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %18, i64 %5, 4, 0, !dbg !13
  %20 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %19, i64 %4, 3, 1, !dbg !14
  %21 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %20, i64 %6, 4, 1, !dbg !15
  %22 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } undef, half addrspace(3)* %7, 0, !dbg !16
  %23 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %22, half addrspace(3)* %8, 1, !dbg !17
  %24 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %23, i64 %9, 2, !dbg !18
  %25 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %24, i64 %10, 3, 0, !dbg !19
  %26 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %25, i64 %12, 4, 0, !dbg !20
  %27 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %26, i64 %11, 3, 1, !dbg !21
  %28 = insertvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %27, i64 %13, 4, 1, !dbg !22
  br label %29, !dbg !23

29:                                               ; preds = %14
  %30 = alloca <2 x half>, i64 mul (i64 ptrtoint (<2 x half>* getelementptr (<2 x half>, <2 x half>* null, i32 1) to i64), i64 8), align 32, !dbg !24
  %31 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } undef, <2 x half>* %30, 0, !dbg !25
  %32 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %31, <2 x half>* %30, 1, !dbg !26
  %33 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %32, i64 0, 2, !dbg !27
  %34 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %33, i64 8, 3, 0, !dbg !28
  %35 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %34, i64 1, 4, 0, !dbg !29
  %36 = alloca <2 x half>, i64 mul (i64 ptrtoint (<2 x half>* getelementptr (<2 x half>, <2 x half>* null, i32 1) to i64), i64 8), align 32, !dbg !30
  %37 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } undef, <2 x half>* %36, 0, !dbg !31
  %38 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %37, <2 x half>* %36, 1, !dbg !32
  %39 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %38, i64 0, 2, !dbg !33
  %40 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %39, i64 8, 3, 0, !dbg !34
  %41 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %40, i64 1, 4, 0, !dbg !35
  %42 = alloca <2 x half>, i64 mul (i64 ptrtoint (<2 x half>* getelementptr (<2 x half>, <2 x half>* null, i32 1) to i64), i64 4), align 32, !dbg !36
  %43 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } undef, <2 x half>* %42, 0, !dbg !37
  %44 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %43, <2 x half>* %42, 1, !dbg !38
  %45 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %44, i64 0, 2, !dbg !39
  %46 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %45, i64 4, 3, 0, !dbg !40
  %47 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %46, i64 1, 4, 0, !dbg !41
  %48 = alloca <2 x half>, i64 mul (i64 ptrtoint (<2 x half>* getelementptr (<2 x half>, <2 x half>* null, i32 1) to i64), i64 4), align 32, !dbg !42
  %49 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } undef, <2 x half>* %48, 0, !dbg !43
  %50 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %49, <2 x half>* %48, 1, !dbg !44
  %51 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %50, i64 0, 2, !dbg !45
  %52 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %51, i64 4, 3, 0, !dbg !46
  %53 = insertvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %52, i64 1, 4, 0, !dbg !47
  %54 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %21, 0, !dbg !48
  %55 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %21, 1, !dbg !49
  %56 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %21, 2, !dbg !50
  %57 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %21, 3, 0, !dbg !51
  %58 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %21, 3, 1, !dbg !52
  %59 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %21, 4, 0, !dbg !53
  %60 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %21, 4, 1, !dbg !54
  %61 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 0, !dbg !55
  %62 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 1, !dbg !56
  %63 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 2, !dbg !57
  %64 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 3, 0, !dbg !58
  %65 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 4, 0, !dbg !59
  %66 = getelementptr half, half addrspace(3)* %55, i32 272, !dbg !60
  %67 = bitcast half addrspace(3)* %66 to i32 addrspace(3)*, !dbg !61
  %68 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32.i32(i32 addrspace(3)* %67, i32 16), !dbg !62
  %69 = bitcast <2 x half>* %62 to i32*, !dbg !63
  %70 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 0, !dbg !64
  %71 = bitcast <2 x half> %70 to i32, !dbg !65
  %72 = getelementptr i32, i32* %69, i32 0, !dbg !66
  store i32 %71, i32* %72, align 4, !dbg !67
  %73 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 1, !dbg !68
  %74 = bitcast <2 x half> %73 to i32, !dbg !69
  %75 = getelementptr i32, i32* %69, i32 1, !dbg !70
  store i32 %74, i32* %75, align 4, !dbg !71
  %76 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 2, !dbg !72
  %77 = bitcast <2 x half> %76 to i32, !dbg !73
  %78 = getelementptr i32, i32* %69, i32 2, !dbg !74
  store i32 %77, i32* %78, align 4, !dbg !75
  %79 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 3, !dbg !76
  %80 = bitcast <2 x half> %79 to i32, !dbg !77
  %81 = getelementptr i32, i32* %69, i32 3, !dbg !78
  store i32 %80, i32* %81, align 4, !dbg !79
  %82 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 4, !dbg !80
  %83 = bitcast <2 x half> %82 to i32, !dbg !81
  %84 = getelementptr i32, i32* %69, i32 4, !dbg !82
  store i32 %83, i32* %84, align 4, !dbg !83
  %85 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 5, !dbg !84
  %86 = bitcast <2 x half> %85 to i32, !dbg !85
  %87 = getelementptr i32, i32* %69, i32 5, !dbg !86
  store i32 %86, i32* %87, align 4, !dbg !87
  %88 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 6, !dbg !88
  %89 = bitcast <2 x half> %88 to i32, !dbg !89
  %90 = getelementptr i32, i32* %69, i32 6, !dbg !90
  store i32 %89, i32* %90, align 4, !dbg !91
  %91 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } %68, 7, !dbg !92
  %92 = bitcast <2 x half> %91 to i32, !dbg !93
  %93 = getelementptr i32, i32* %69, i32 7, !dbg !94
  store i32 %92, i32* %93, align 4, !dbg !95
  %94 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 0, !dbg !96
  %95 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 1, !dbg !97
  %96 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 2, !dbg !98
  %97 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 3, 0, !dbg !99
  %98 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %35, 4, 0, !dbg !100
  %99 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %41, 0, !dbg !101
  %100 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %41, 1, !dbg !102
  %101 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %41, 2, !dbg !103
  %102 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %41, 3, 0, !dbg !104
  %103 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %41, 4, 0, !dbg !105
  %104 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %47, 0, !dbg !106
  %105 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %47, 1, !dbg !107
  %106 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %47, 2, !dbg !108
  %107 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %47, 3, 0, !dbg !109
  %108 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %47, 4, 0, !dbg !110
  %109 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 0, !dbg !111
  %110 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 1, !dbg !112
  %111 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 2, !dbg !113
  %112 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 3, 0, !dbg !114
  %113 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 4, 0, !dbg !115
  %114 = getelementptr <2 x half>, <2 x half>* %95, i32 0, !dbg !116
  %115 = load <2 x half>, <2 x half>* %114, align 4, !dbg !117
  %116 = getelementptr <2 x half>, <2 x half>* %95, i32 1, !dbg !118
  %117 = load <2 x half>, <2 x half>* %116, align 4, !dbg !119
  %118 = getelementptr <2 x half>, <2 x half>* %95, i32 2, !dbg !120
  %119 = load <2 x half>, <2 x half>* %118, align 4, !dbg !121
  %120 = getelementptr <2 x half>, <2 x half>* %95, i32 3, !dbg !122
  %121 = load <2 x half>, <2 x half>* %120, align 4, !dbg !123
  %122 = getelementptr <2 x half>, <2 x half>* %95, i32 4, !dbg !124
  %123 = load <2 x half>, <2 x half>* %122, align 4, !dbg !125
  %124 = getelementptr <2 x half>, <2 x half>* %95, i32 5, !dbg !126
  %125 = load <2 x half>, <2 x half>* %124, align 4, !dbg !127
  %126 = getelementptr <2 x half>, <2 x half>* %95, i32 6, !dbg !128
  %127 = load <2 x half>, <2 x half>* %126, align 4, !dbg !129
  %128 = getelementptr <2 x half>, <2 x half>* %95, i32 7, !dbg !130
  %129 = load <2 x half>, <2 x half>* %128, align 4, !dbg !131
  %130 = getelementptr <2 x half>, <2 x half>* %95, i32 0, !dbg !132
  %131 = load <2 x half>, <2 x half>* %130, align 4, !dbg !133
  %132 = getelementptr <2 x half>, <2 x half>* %95, i32 1, !dbg !134
  %133 = load <2 x half>, <2 x half>* %132, align 4, !dbg !135
  %134 = getelementptr <2 x half>, <2 x half>* %95, i32 2, !dbg !136
  %135 = load <2 x half>, <2 x half>* %134, align 4, !dbg !137
  %136 = getelementptr <2 x half>, <2 x half>* %95, i32 3, !dbg !138
  %137 = load <2 x half>, <2 x half>* %136, align 4, !dbg !139
  %138 = getelementptr <2 x half>, <2 x half>* %95, i32 4, !dbg !140
  %139 = load <2 x half>, <2 x half>* %138, align 4, !dbg !141
  %140 = getelementptr <2 x half>, <2 x half>* %95, i32 5, !dbg !142
  %141 = load <2 x half>, <2 x half>* %140, align 4, !dbg !143
  %142 = getelementptr <2 x half>, <2 x half>* %95, i32 6, !dbg !144
  %143 = load <2 x half>, <2 x half>* %142, align 4, !dbg !145
  %144 = getelementptr <2 x half>, <2 x half>* %95, i32 7, !dbg !146
  %145 = load <2 x half>, <2 x half>* %144, align 4, !dbg !147
  %146 = getelementptr <2 x half>, <2 x half>* %95, i32 0, !dbg !148
  %147 = load <2 x half>, <2 x half>* %146, align 4, !dbg !149
  %148 = getelementptr <2 x half>, <2 x half>* %95, i32 1, !dbg !150
  %149 = load <2 x half>, <2 x half>* %148, align 4, !dbg !151
  %150 = getelementptr <2 x half>, <2 x half>* %95, i32 2, !dbg !152
  %151 = load <2 x half>, <2 x half>* %150, align 4, !dbg !153
  %152 = getelementptr <2 x half>, <2 x half>* %95, i32 3, !dbg !154
  %153 = load <2 x half>, <2 x half>* %152, align 4, !dbg !155
  %154 = call { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half> %115, <2 x half> %117, <2 x half> %119, <2 x half> %121, <2 x half> %123, <2 x half> %125, <2 x half> %127, <2 x half> %129, <2 x half> %131, <2 x half> %133, <2 x half> %135, <2 x half> %137, <2 x half> %139, <2 x half> %141, <2 x half> %143, <2 x half> %145, <2 x half> %147, <2 x half> %149, <2 x half> %151, <2 x half> %153), !dbg !156
  %155 = bitcast <2 x half>* %110 to i32*, !dbg !157
  %156 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %154, 0, !dbg !158
  %157 = bitcast <2 x half> %156 to i32, !dbg !159
  %158 = getelementptr i32, i32* %155, i32 0, !dbg !160
  store i32 %157, i32* %158, align 4, !dbg !161
  %159 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %154, 1, !dbg !162
  %160 = bitcast <2 x half> %159 to i32, !dbg !163
  %161 = getelementptr i32, i32* %155, i32 1, !dbg !164
  store i32 %160, i32* %161, align 4, !dbg !165
  %162 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %154, 2, !dbg !166
  %163 = bitcast <2 x half> %162 to i32, !dbg !167
  %164 = getelementptr i32, i32* %155, i32 2, !dbg !168
  store i32 %163, i32* %164, align 4, !dbg !169
  %165 = extractvalue { <2 x half>, <2 x half>, <2 x half>, <2 x half> } %154, 3, !dbg !170
  %166 = bitcast <2 x half> %165 to i32, !dbg !171
  %167 = getelementptr i32, i32* %155, i32 3, !dbg !172
  store i32 %166, i32* %167, align 4, !dbg !173
  %168 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 0, !dbg !174
  %169 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 1, !dbg !175
  %170 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 2, !dbg !176
  %171 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 3, 0, !dbg !177
  %172 = extractvalue { <2 x half>*, <2 x half>*, i64, [1 x i64], [1 x i64] } %53, 4, 0, !dbg !178
  %173 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %28, 0, !dbg !179
  %174 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %28, 1, !dbg !180
  %175 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %28, 2, !dbg !181
  %176 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %28, 3, 0, !dbg !182
  %177 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %28, 3, 1, !dbg !183
  %178 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %28, 4, 0, !dbg !184
  %179 = extractvalue { half addrspace(3)*, half addrspace(3)*, i64, [2 x i64], [2 x i64] } %28, 4, 1, !dbg !185
  %180 = getelementptr half, half addrspace(3)* %174, i32 272, !dbg !186
  %181 = bitcast half addrspace(3)* %180 to i32 addrspace(3)*, !dbg !187
  %182 = getelementptr <2 x half>, <2 x half>* %169, i32 0, !dbg !188
  %183 = load <2 x half>, <2 x half>* %182, align 4, !dbg !189
  %184 = getelementptr <2 x half>, <2 x half>* %169, i32 1, !dbg !190
  %185 = load <2 x half>, <2 x half>* %184, align 4, !dbg !191
  %186 = getelementptr <2 x half>, <2 x half>* %169, i32 2, !dbg !192
  %187 = load <2 x half>, <2 x half>* %186, align 4, !dbg !193
  %188 = getelementptr <2 x half>, <2 x half>* %169, i32 3, !dbg !194
  %189 = load <2 x half>, <2 x half>* %188, align 4, !dbg !195
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p3i32.v2f16.v2f16.v2f16.v2f16(i32 addrspace(3)* %181, <2 x half> %183, <2 x half> %185, <2 x half> %187, <2 x half> %189), !dbg !196
  ret void, !dbg !197
}

; Function Attrs: argmemonly nounwind readonly
declare { <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i32.i32(i32 addrspace(3)* nocapture readonly, i32) #0

; Function Attrs: nounwind readnone
declare { <2 x half>, <2 x half>, <2 x half>, <2 x half> } @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>) #1

; Function Attrs: argmemonly nounwind writeonly
declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p3i32.v2f16.v2f16.v2f16.v2f16(i32 addrspace(3)* nocapture writeonly, <2 x half>, <2 x half>, <2 x half>, <2 x half>) #2

attributes #0 = { argmemonly nounwind readonly }
attributes #1 = { nounwind readnone }
attributes #2 = { argmemonly nounwind writeonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2}
!nvvm.annotations = !{!3}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "mlir", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
!1 = !DIFile(filename: "LLVMDialectModule", directory: "/")
!2 = !{i32 2, !"Debug Info Version", i32 3}
!3 = !{void (half addrspace(3)*, half addrspace(3)*, i64, i64, i64, i64, i64, half addrspace(3)*, half addrspace(3)*, i64, i64, i64, i64, i64)* @main_kernel, !"kernel", i32 1}
!4 = distinct !DISubprogram(name: "main_kernel", linkageName: "main_kernel", scope: null, file: !5, line: 1, type: !6, scopeLine: 1, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !7)
!5 = !DIFile(filename: "finalLowering.mlir", directory: "/home/navdeep/work/GPU_GEMM/llvm-project-mcl/mlir")
!6 = !DISubroutineType(types: !7)
!7 = !{}
!8 = !DILocation(line: 3, column: 12, scope: !9)
!9 = !DILexicalBlockFile(scope: !4, file: !5, discriminator: 0)
!10 = !DILocation(line: 4, column: 12, scope: !9)
!11 = !DILocation(line: 5, column: 12, scope: !9)
!12 = !DILocation(line: 6, column: 12, scope: !9)
!13 = !DILocation(line: 7, column: 12, scope: !9)
!14 = !DILocation(line: 8, column: 12, scope: !9)
!15 = !DILocation(line: 9, column: 12, scope: !9)
!16 = !DILocation(line: 11, column: 12, scope: !9)
!17 = !DILocation(line: 12, column: 13, scope: !9)
!18 = !DILocation(line: 13, column: 13, scope: !9)
!19 = !DILocation(line: 14, column: 13, scope: !9)
!20 = !DILocation(line: 15, column: 13, scope: !9)
!21 = !DILocation(line: 16, column: 13, scope: !9)
!22 = !DILocation(line: 17, column: 13, scope: !9)
!23 = !DILocation(line: 18, column: 7, scope: !9)
!24 = !DILocation(line: 25, column: 13, scope: !9)
!25 = !DILocation(line: 27, column: 13, scope: !9)
!26 = !DILocation(line: 28, column: 13, scope: !9)
!27 = !DILocation(line: 30, column: 13, scope: !9)
!28 = !DILocation(line: 31, column: 13, scope: !9)
!29 = !DILocation(line: 32, column: 13, scope: !9)
!30 = !DILocation(line: 38, column: 13, scope: !9)
!31 = !DILocation(line: 40, column: 13, scope: !9)
!32 = !DILocation(line: 41, column: 13, scope: !9)
!33 = !DILocation(line: 43, column: 13, scope: !9)
!34 = !DILocation(line: 44, column: 13, scope: !9)
!35 = !DILocation(line: 45, column: 13, scope: !9)
!36 = !DILocation(line: 51, column: 13, scope: !9)
!37 = !DILocation(line: 53, column: 13, scope: !9)
!38 = !DILocation(line: 54, column: 13, scope: !9)
!39 = !DILocation(line: 56, column: 13, scope: !9)
!40 = !DILocation(line: 57, column: 13, scope: !9)
!41 = !DILocation(line: 58, column: 13, scope: !9)
!42 = !DILocation(line: 64, column: 13, scope: !9)
!43 = !DILocation(line: 66, column: 13, scope: !9)
!44 = !DILocation(line: 67, column: 13, scope: !9)
!45 = !DILocation(line: 69, column: 13, scope: !9)
!46 = !DILocation(line: 70, column: 13, scope: !9)
!47 = !DILocation(line: 71, column: 13, scope: !9)
!48 = !DILocation(line: 72, column: 13, scope: !9)
!49 = !DILocation(line: 73, column: 13, scope: !9)
!50 = !DILocation(line: 74, column: 13, scope: !9)
!51 = !DILocation(line: 75, column: 13, scope: !9)
!52 = !DILocation(line: 76, column: 13, scope: !9)
!53 = !DILocation(line: 77, column: 13, scope: !9)
!54 = !DILocation(line: 78, column: 13, scope: !9)
!55 = !DILocation(line: 79, column: 13, scope: !9)
!56 = !DILocation(line: 80, column: 13, scope: !9)
!57 = !DILocation(line: 81, column: 13, scope: !9)
!58 = !DILocation(line: 82, column: 13, scope: !9)
!59 = !DILocation(line: 83, column: 13, scope: !9)
!60 = !DILocation(line: 89, column: 13, scope: !9)
!61 = !DILocation(line: 90, column: 13, scope: !9)
!62 = !DILocation(line: 91, column: 13, scope: !9)
!63 = !DILocation(line: 92, column: 13, scope: !9)
!64 = !DILocation(line: 93, column: 13, scope: !9)
!65 = !DILocation(line: 94, column: 13, scope: !9)
!66 = !DILocation(line: 96, column: 13, scope: !9)
!67 = !DILocation(line: 97, column: 7, scope: !9)
!68 = !DILocation(line: 98, column: 13, scope: !9)
!69 = !DILocation(line: 99, column: 13, scope: !9)
!70 = !DILocation(line: 101, column: 13, scope: !9)
!71 = !DILocation(line: 102, column: 7, scope: !9)
!72 = !DILocation(line: 103, column: 13, scope: !9)
!73 = !DILocation(line: 104, column: 13, scope: !9)
!74 = !DILocation(line: 106, column: 14, scope: !9)
!75 = !DILocation(line: 107, column: 7, scope: !9)
!76 = !DILocation(line: 108, column: 14, scope: !9)
!77 = !DILocation(line: 109, column: 14, scope: !9)
!78 = !DILocation(line: 111, column: 14, scope: !9)
!79 = !DILocation(line: 112, column: 7, scope: !9)
!80 = !DILocation(line: 113, column: 14, scope: !9)
!81 = !DILocation(line: 114, column: 14, scope: !9)
!82 = !DILocation(line: 116, column: 14, scope: !9)
!83 = !DILocation(line: 117, column: 7, scope: !9)
!84 = !DILocation(line: 118, column: 14, scope: !9)
!85 = !DILocation(line: 119, column: 14, scope: !9)
!86 = !DILocation(line: 121, column: 14, scope: !9)
!87 = !DILocation(line: 122, column: 7, scope: !9)
!88 = !DILocation(line: 123, column: 14, scope: !9)
!89 = !DILocation(line: 124, column: 14, scope: !9)
!90 = !DILocation(line: 126, column: 14, scope: !9)
!91 = !DILocation(line: 127, column: 7, scope: !9)
!92 = !DILocation(line: 128, column: 14, scope: !9)
!93 = !DILocation(line: 129, column: 14, scope: !9)
!94 = !DILocation(line: 131, column: 14, scope: !9)
!95 = !DILocation(line: 132, column: 7, scope: !9)
!96 = !DILocation(line: 133, column: 14, scope: !9)
!97 = !DILocation(line: 134, column: 14, scope: !9)
!98 = !DILocation(line: 135, column: 14, scope: !9)
!99 = !DILocation(line: 136, column: 14, scope: !9)
!100 = !DILocation(line: 137, column: 14, scope: !9)
!101 = !DILocation(line: 138, column: 14, scope: !9)
!102 = !DILocation(line: 139, column: 14, scope: !9)
!103 = !DILocation(line: 140, column: 14, scope: !9)
!104 = !DILocation(line: 141, column: 14, scope: !9)
!105 = !DILocation(line: 142, column: 14, scope: !9)
!106 = !DILocation(line: 143, column: 14, scope: !9)
!107 = !DILocation(line: 144, column: 14, scope: !9)
!108 = !DILocation(line: 145, column: 14, scope: !9)
!109 = !DILocation(line: 146, column: 14, scope: !9)
!110 = !DILocation(line: 147, column: 14, scope: !9)
!111 = !DILocation(line: 148, column: 14, scope: !9)
!112 = !DILocation(line: 149, column: 14, scope: !9)
!113 = !DILocation(line: 150, column: 14, scope: !9)
!114 = !DILocation(line: 151, column: 14, scope: !9)
!115 = !DILocation(line: 152, column: 14, scope: !9)
!116 = !DILocation(line: 154, column: 14, scope: !9)
!117 = !DILocation(line: 155, column: 14, scope: !9)
!118 = !DILocation(line: 157, column: 14, scope: !9)
!119 = !DILocation(line: 158, column: 14, scope: !9)
!120 = !DILocation(line: 160, column: 14, scope: !9)
!121 = !DILocation(line: 161, column: 14, scope: !9)
!122 = !DILocation(line: 163, column: 14, scope: !9)
!123 = !DILocation(line: 164, column: 14, scope: !9)
!124 = !DILocation(line: 166, column: 14, scope: !9)
!125 = !DILocation(line: 167, column: 14, scope: !9)
!126 = !DILocation(line: 169, column: 14, scope: !9)
!127 = !DILocation(line: 170, column: 14, scope: !9)
!128 = !DILocation(line: 172, column: 14, scope: !9)
!129 = !DILocation(line: 173, column: 14, scope: !9)
!130 = !DILocation(line: 175, column: 14, scope: !9)
!131 = !DILocation(line: 176, column: 14, scope: !9)
!132 = !DILocation(line: 178, column: 14, scope: !9)
!133 = !DILocation(line: 179, column: 14, scope: !9)
!134 = !DILocation(line: 181, column: 14, scope: !9)
!135 = !DILocation(line: 182, column: 14, scope: !9)
!136 = !DILocation(line: 184, column: 14, scope: !9)
!137 = !DILocation(line: 185, column: 14, scope: !9)
!138 = !DILocation(line: 187, column: 14, scope: !9)
!139 = !DILocation(line: 188, column: 14, scope: !9)
!140 = !DILocation(line: 190, column: 14, scope: !9)
!141 = !DILocation(line: 191, column: 14, scope: !9)
!142 = !DILocation(line: 193, column: 14, scope: !9)
!143 = !DILocation(line: 194, column: 14, scope: !9)
!144 = !DILocation(line: 196, column: 14, scope: !9)
!145 = !DILocation(line: 197, column: 14, scope: !9)
!146 = !DILocation(line: 199, column: 14, scope: !9)
!147 = !DILocation(line: 200, column: 14, scope: !9)
!148 = !DILocation(line: 202, column: 14, scope: !9)
!149 = !DILocation(line: 203, column: 14, scope: !9)
!150 = !DILocation(line: 205, column: 14, scope: !9)
!151 = !DILocation(line: 206, column: 14, scope: !9)
!152 = !DILocation(line: 208, column: 14, scope: !9)
!153 = !DILocation(line: 209, column: 14, scope: !9)
!154 = !DILocation(line: 211, column: 14, scope: !9)
!155 = !DILocation(line: 212, column: 14, scope: !9)
!156 = !DILocation(line: 213, column: 14, scope: !9)
!157 = !DILocation(line: 214, column: 14, scope: !9)
!158 = !DILocation(line: 215, column: 14, scope: !9)
!159 = !DILocation(line: 216, column: 14, scope: !9)
!160 = !DILocation(line: 218, column: 14, scope: !9)
!161 = !DILocation(line: 219, column: 7, scope: !9)
!162 = !DILocation(line: 220, column: 14, scope: !9)
!163 = !DILocation(line: 221, column: 14, scope: !9)
!164 = !DILocation(line: 223, column: 14, scope: !9)
!165 = !DILocation(line: 224, column: 7, scope: !9)
!166 = !DILocation(line: 225, column: 14, scope: !9)
!167 = !DILocation(line: 226, column: 14, scope: !9)
!168 = !DILocation(line: 228, column: 14, scope: !9)
!169 = !DILocation(line: 229, column: 7, scope: !9)
!170 = !DILocation(line: 230, column: 14, scope: !9)
!171 = !DILocation(line: 231, column: 14, scope: !9)
!172 = !DILocation(line: 233, column: 14, scope: !9)
!173 = !DILocation(line: 234, column: 7, scope: !9)
!174 = !DILocation(line: 235, column: 14, scope: !9)
!175 = !DILocation(line: 236, column: 14, scope: !9)
!176 = !DILocation(line: 237, column: 14, scope: !9)
!177 = !DILocation(line: 238, column: 14, scope: !9)
!178 = !DILocation(line: 239, column: 14, scope: !9)
!179 = !DILocation(line: 240, column: 14, scope: !9)
!180 = !DILocation(line: 241, column: 14, scope: !9)
!181 = !DILocation(line: 242, column: 14, scope: !9)
!182 = !DILocation(line: 243, column: 14, scope: !9)
!183 = !DILocation(line: 244, column: 14, scope: !9)
!184 = !DILocation(line: 245, column: 14, scope: !9)
!185 = !DILocation(line: 246, column: 14, scope: !9)
!186 = !DILocation(line: 252, column: 14, scope: !9)
!187 = !DILocation(line: 253, column: 14, scope: !9)
!188 = !DILocation(line: 255, column: 14, scope: !9)
!189 = !DILocation(line: 256, column: 14, scope: !9)
!190 = !DILocation(line: 258, column: 14, scope: !9)
!191 = !DILocation(line: 259, column: 14, scope: !9)
!192 = !DILocation(line: 261, column: 14, scope: !9)
!193 = !DILocation(line: 262, column: 14, scope: !9)
!194 = !DILocation(line: 264, column: 14, scope: !9)
!195 = !DILocation(line: 265, column: 14, scope: !9)
!196 = !DILocation(line: 266, column: 7, scope: !9)
!197 = !DILocation(line: 267, column: 7, scope: !9)
