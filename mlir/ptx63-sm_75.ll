
declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_row_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_a_col_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_row_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_b_col_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m16n16k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_row_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_a_col_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_row_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m32n8k16_load_b_col_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m32n8k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_row_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n32k16_load_a_col_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_u8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_u8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.u8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_row_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.row.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p0i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p0i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p3i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p3i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.shared.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_s8_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p1i8(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p1i8_o(
define {i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_b_col_stride_s8_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n32k16.global.s8
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_f32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_f32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_f32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_f32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_row_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_load_c_col_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m16n16k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_f32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_f32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_f32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_f32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_row_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_load_c_col_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m32n8k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p0i8(i8 addrspace(0)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p0i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p0i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p3i8(i8 addrspace(3)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p3i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p3i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f16_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p1i8(i8 addrspace(1)* %src1 );
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p1i8(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p1i8_o(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f16_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f16
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p0i8(i8 addrspace(0)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p3i8(i8 addrspace(3)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_f32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p1i8(i8 addrspace(1)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_f32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p0i8(i8 addrspace(0)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p0i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p0i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p3i8(i8 addrspace(3)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p3i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p3i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src );
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_f32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p1i8(i8 addrspace(1)* %src1 );
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p1i8(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p1i8_o(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_f32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.f32
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {float, float, float, float, float, float, float, float} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_row_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p0i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p0i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p3i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p3i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p1i8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p1i8_o(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_load_c_col_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n32k16.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_s4_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_s4_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_u4_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_a_row_stride_u4_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_s4_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_s4_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.s4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.shared.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_u4_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k32_load_b_col_stride_u4_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k32.global.u4
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_b1_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_a_row_stride_b1_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.a.sync.aligned.row.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p0i8(i8 addrspace(0)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p0i8(i8 addrspace(0)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p0i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p0i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p3i8(i8 addrspace(3)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p3i8(i8 addrspace(3)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p3i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p3i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.shared.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p1i8(i8 addrspace(1)* %src );
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_b1_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p1i8(i8 addrspace(1)* %src1 );
  ret i32 %v0;
}


declare i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p1i8(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret i32 %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p1i8_o(
define i32 @test_llvm_nvvm_wmma_m8n8k128_load_b_col_stride_b1_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.b.sync.aligned.col.m8n8k128.global.b1
; CHECK: {{{%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call i32 @llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret i32 %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_row_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_load_c_col_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k32.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_row_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.row.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p0i8(i8 addrspace(0)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p0i8(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p0i8(i8 addrspace(0)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p0i8_o(i8 addrspace(0)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p0i8(i8 addrspace(0)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p0i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p0i8(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p0i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p0i8_o(i8 addrspace(0)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p0i8(i8 addrspace(0)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p3i8(i8 addrspace(3)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p3i8(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p3i8(i8 addrspace(3)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p3i8_o(i8 addrspace(3)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p3i8(i8 addrspace(3)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p3i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p3i8(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p3i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p3i8_o(i8 addrspace(3)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.shared.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p3i8(i8 addrspace(3)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p1i8(i8 addrspace(1)* %src );

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p1i8(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}]
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p1i8(i8 addrspace(1)* %src );
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_s32_p1i8_o(i8 addrspace(1)* %src ) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128]
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p1i8(i8 addrspace(1)* %src1 );
  ret {i32, i32} %v0;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p1i8(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p1i8(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}], %r{{[0-9]+}}
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src , i32 %stride);
  ret {i32, i32} %v0;
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p1i8_o(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_load_c_col_stride_s32_p1i8_o(i8 addrspace(1)* %src , i32 %stride) {
; CHECK: wmma.load.c.sync.aligned.col.m8n8k128.global.s32
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: [%rd{{[0-9]+}}+128], %r{{[0-9]+}}
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  %v0 = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p1i8(i8 addrspace(1)* %src1 , i32 %stride);
  ret {i32, i32} %v0;
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_row_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m16n16k16_store_d_col_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m16n16k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_row_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m32n8k16_store_d_col_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m32n8k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p0i8_o(i8 addrspace(0)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p0i8(i8 addrspace(0)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p3i8_o(i8 addrspace(3)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p3i8(i8 addrspace(3)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f16_p1i8_o(i8 addrspace(1)* %src, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f16 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p1i8(i8 addrspace(1)* %src1, <2 x half> %d0, <2 x half> %d1, <2 x half> %d2, <2 x half> %d3, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p0i8_o(i8 addrspace(0)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p0i8(i8 addrspace(0)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p3i8_o(i8 addrspace(3)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p3i8(i8 addrspace(3)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_f32_p1i8_o(i8 addrspace(1)* %src, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.f32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p1i8(i8 addrspace(1)* %src1, float %d0, float %d1, float %d2, float %d3, float %d4, float %d5, float %d6, float %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_row_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7);
  ret void
}


declare void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n32k16_store_d_col_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n32k16.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %d2, i32 %d3, i32 %d4, i32 %d5, i32 %d6, i32 %d7, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_row_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k32_store_d_col_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k32.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_row_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.row.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p0i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p0i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p0i8_o(i8 addrspace(0)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(0)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p0i8(i8 addrspace(0)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p3i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p3i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p3i8_o(i8 addrspace(3)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.shared.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(3)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p3i8(i8 addrspace(3)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: ;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 );
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: ;
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1);
  ret void
}


declare void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p1i8(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}
; CHECK: {{{%r[0-9]+, *%r[0-9]+}}}
; CHECK: , %r{{[0-9]+}};
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src, i32 %d0, i32 %d1 , i32 %stride);
  ret void
}

; CHECK-LABEL: .func{{.*}}test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p1i8_o(
define void @test_llvm_nvvm_wmma_m8n8k128_store_d_col_stride_s32_p1i8_o(i8 addrspace(1)* %src, i32 %d0, i32 %d1, i32 %stride) {
; CHECK: wmma.store.d.sync.aligned.col.m8n8k128.global.s32 {{.*}}[%rd{{[0-9+]}}+128]
; CHECK: {{%r[0-9]+, *%r[0-9]+}}
; CHECK: , %r{{[0-9]+}};
  %src1 = getelementptr i8, i8 addrspace(1)* %src, i32 128;
  call void @llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p1i8(i8 addrspace(1)* %src1, i32 %d0, i32 %d1, i32 %stride);
  ret void
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f16_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f16.f16.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f16(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f16.f16
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f16_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f16_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f32.f16.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f16.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f16(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f32.f16
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f16(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        <2 x half> %c0, <2 x half> %c1, <2 x half> %c2, <2 x half> %c3);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f32_satfinite(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f16.f32.satfinite
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f32(
define {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f16_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f16.f32
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {<2 x half>, <2 x half>, <2 x half>, <2 x half>} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {<2 x half>, <2 x half>, <2 x half>, <2 x half>} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f32_satfinite(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f32_satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f32.f32.satfinite
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f32.satfinite(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f32(
define {float, float, float, float, float, float, float, float} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_f32_f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.f32.f32
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+, *%hh[0-9]+}}
; CHECK-NEXT: {{%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+, *%f[0-9]+}}
  %r = call {float, float, float, float, float, float, float, float} @llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f32(
        <2 x half> %a0, <2 x half> %a1, <2 x half> %a2, <2 x half> %a3, <2 x half> %a4, <2 x half> %a5, <2 x half> %a6, <2 x half> %a7,
        <2 x half> %b0, <2 x half> %b1, <2 x half> %b2, <2 x half> %b3, <2 x half> %b4, <2 x half> %b5, <2 x half> %b6, <2 x half> %b7,
        float %c0, float %c1, float %c2, float %c3, float %c4, float %c5, float %c6, float %c7);
  ret {float, float, float, float, float, float, float, float} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_s8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_s8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_s8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_s8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.s8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.s8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_u8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_row_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_row_u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m16n16k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.row.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_u8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_row_col_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_row_col_u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m16n16k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.row.col.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_u8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_row_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_row_u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m16n16k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.row.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_u8_satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.u8.satfinite(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m16n16k16_mma_col_col_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m16n16k16_mma_col_col_u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m16n16k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m16n16k16.mma.col.col.u8(
        i32 %a0, i32 %a1,
        i32 %b0, i32 %b1,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_s8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_s8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_s8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_s8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.s8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.s8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_u8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_row_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_row_u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m32n8k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.row.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_u8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_row_col_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_row_col_u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m32n8k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.row.col.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_u8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_row_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_row_u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m32n8k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.row.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_u8_satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.u8.satfinite(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m32n8k16_mma_col_col_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m32n8k16_mma_col_col_u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m32n8k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m32n8k16.mma.col.col.u8(
        i32 %a0, i32 %a1, i32 %a2, i32 %a3,
        i32 %b0,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_s8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_s8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_s8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_s8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_s8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.s32.s8.s8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.s8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_s8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.s32.s8.s8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.s8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_u8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_row_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_row_u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.row.m8n32k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.row.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_u8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_row_col_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_row_col_u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n32k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.row.col.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_u8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_row_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_row_u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.row.m8n32k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.row.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_u8_satfinite(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_u8_satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.s32.u8.u8.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.u8.satfinite(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n32k16_mma_col_col_u8(
define {i32, i32, i32, i32, i32, i32, i32, i32} @test_llvm_nvvm_wmma_m8n32k16_mma_col_col_u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7) {
; CHECK: wmma.mma.sync.aligned.col.col.m8n32k16.s32.u8.u8.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32, i32, i32, i32, i32, i32, i32} @llvm.nvvm.wmma.m8n32k16.mma.col.col.u8(
        i32 %a0,
        i32 %b0, i32 %b1, i32 %b2, i32 %b3,
        i32 %c0, i32 %c1, i32 %c2, i32 %c3, i32 %c4, i32 %c5, i32 %c6, i32 %c7);
  ret {i32, i32, i32, i32, i32, i32, i32, i32} %r;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.s4.satfinite(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_mma_row_col_s4_satfinite(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_mma_row_col_s4_satfinite(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n8k32.s32.s4.s4.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.s4.satfinite(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);
  ret {i32, i32} %r;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.s4(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_mma_row_col_s4(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_mma_row_col_s4(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n8k32.s32.s4.s4.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.s4(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);
  ret {i32, i32} %r;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.u4.satfinite(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_mma_row_col_u4_satfinite(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_mma_row_col_u4_satfinite(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n8k32.s32.u4.u4.s32.satfinite
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.u4.satfinite(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);
  ret {i32, i32} %r;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.u4(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k32_mma_row_col_u4(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k32_mma_row_col_u4(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1) {
; CHECK: wmma.mma.sync.aligned.row.col.m8n8k32.s32.u4.u4.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32} @llvm.nvvm.wmma.m8n8k32.mma.row.col.u4(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);
  ret {i32, i32} %r;
}


declare {i32, i32} @llvm.nvvm.wmma.m8n8k128.mma.row.col.b1(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);

; CHECK-LABEL: .func {{.*}}test_llvm_nvvm_wmma_m8n8k128_mma_row_col_b1(
define {i32, i32} @test_llvm_nvvm_wmma_m8n8k128_mma_row_col_b1(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1) {
; CHECK: wmma.mma.xor.popc.sync.aligned.row.col.m8n8k128.s32.b1.b1.s32
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+}}
; CHECK-NEXT: {{%r[0-9]+, *%r[0-9]+}}
  %r = call {i32, i32} @llvm.nvvm.wmma.m8n8k128.mma.row.col.b1(
        i32 %a0,
        i32 %b0,
        i32 %c0, i32 %c1);
  ret {i32, i32} %r;
}

; Complete list of intrinsics supported by PTX63 on sm_75
; INTRINSICS: {{^; INTRINSICS_LIST_BEGIN}}


; NOEXTGEOM-NOT: {{m8n32|m32n8}}
; NOINT-NOT: .{{s32|s8}}
; NOSUBINT-NOT: {{s4|u4|b1}}
; NOMMA-NOT: .m8n8k4.

; M16N16-DAG: m16n16k16.load.{{[ab].*}}.f16.p
; M16N16-DAG: m16n16k16.{{load|store}}.{{[cd].*\.(f16|f32)}}.p
; M16N16-DAG: m16n16k16.mma.{{.*}}.f16.f32
; M16N16-DAG: m16n16k16.mma.{{.*}}.f32.f16
; M16N16-DAG: m16n16k16.mma.{{.*}}.f16.f16
; M16N16-DAG: m16n16k16.mma.{{.*}}.f32.f32

; PTX60 adds support for m32n8k16/m8n32k16 geometries.
; EXTGEOM-DAG: m32n8k16.load.{{[ab].*}}.f16.p
; EXTGEOM-DAG: m32n8k16.{{load|store}}.{{[cd].*\.(f16|f32)}}.p
; EXTGEOM-DAG: m32n8k16.mma.{{.*}}.f16.f32
; EXTGEOM-DAG: m32n8k16.mma.{{.*}}.f32.f16
; EXTGEOM-DAG: m32n8k16.mma.{{.*}}.f16.f16
; EXTGEOM-DAG: m32n8k16.mma.{{.*}}.f32.f32

; EXTGEOM-DAG: m8n32k16.load.{{[ab].*}}.f16.p
; EXTGEOM-DAG: m8n32k16.{{load|store}}.{{[cd].*\.(f16|f32)}}.p
; EXTGEOM-DAG: m8n32k16.mma.{{.*}}.f16.f32
; EXTGEOM-DAG: m8n32k16.mma.{{.*}}.f32.f16
; EXTGEOM-DAG: m8n32k16.mma.{{.*}}.f16.f16
; EXTGEOM-DAG: m8n32k16.mma.{{.*}}.f32.f32

; INT-DAG: m16n16k16.load.{{[ab].*}}.s8.p
; INT-DAG: m8n32k16.load.{{[ab].*}}.s8.p
; INT-DAG: m32n8k16.load.{{[ab].*}}.s8.p
; INT-DAG: m16n16k16.load.{{[ab].*}}.u8.p
; INT-DAG: m8n32k16.load.{{[ab].*}}.u8.p
; INT-DAG: m32n8k16.load.{{[ab].*}}.u8.p
; INT-DAG: m32n8k16.{{load|store}}.{{[cd].*\.s32}}.p
; INT-DAG: m16n16k16.mma.{{.*}}.u8
; INT-DAG: m16n16k16.mma.{{.*}}.s8
; INT-DAG: m8n32k16.mma.{{.*}}.u8
; INT-DAG: m8n32k16.mma.{{.*}}.s8
; INT-DAG: m32n8k16.mma.{{.*}}.u8
; INT-DAG: m32n8k16.mma.{{.*}}.s8

; SUBINT-DAG: m8n8k128.load.{{[ab].*}}.b1.p
; SUBINT-DAG: m8n8k32.load.{{[ab].*}}.s4.p
; SUBINT-DAG: m8n8k32.load.{{[ab].*}}.u4.p
; SUBINT-DAG: m8n8k128.{{load|store}}.{{[cd].*\.s32}}.p
; SUBINT-DAG: m8n8k32.{{load|store}}.{{[cd].*\.s32}}.p
; SUBINT-DAG: m8n8k32.mma.{{.*}}.u4
; SUBINT-DAG: m8n8k32.mma.{{.*}}.s4
; SUBINT-DAG: m8n8k128.mma.{{.*}}.b1

; MMA-DAG: mma.m8n8k4.{{.*}}.f16.f32
; MMA-DAG: mma.m8n8k4.{{.*}}.f32.f16
; MMA-DAG: mma.m8n8k4.{{.*}}.f16.f16
; MMA-DAG: mma.m8n8k4.{{.*}}.f32.f32
;


; INTRINSICS_LIST_BEGIN
;  llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p0i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p1i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.f16.p3i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p0i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p1i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.s8.p3i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p0i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p1i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.f16.p3i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p0i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p1i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.s8.p3i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p0i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p1i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.stride.u8.p3i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p0i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p1i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.col.u8.p3i8  ->  wmma.load.a.sync.aligned.col.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p0i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p1i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.f16.p3i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p0i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p1i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.s8.p3i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p0i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p1i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.f16.p3i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p0i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p1i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.s8.p3i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p0i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p1i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.stride.u8.p3i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p0i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p1i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.a.row.u8.p3i8  ->  wmma.load.a.sync.aligned.row.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p0i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p1i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.f16.p3i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p0i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p1i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.s8.p3i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p0i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p1i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.f16.p3i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p0i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p1i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.s8.p3i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p0i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p1i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.stride.u8.p3i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p0i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p1i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.col.u8.p3i8  ->  wmma.load.b.sync.aligned.col.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p0i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p1i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.f16.p3i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p0i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p1i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.s8.p3i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p0i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p1i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.f16.p3i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p0i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p1i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.global.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.s8.p3i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.shared.s8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p0i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p1i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.stride.u8.p3i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p0i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p1i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.global.u8 
;  llvm.nvvm.wmma.m16n16k16.load.b.row.u8.p3i8  ->  wmma.load.b.sync.aligned.row.m16n16k16.shared.u8 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p0i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p1i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.f16.p3i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p0i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p1i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.f32.p3i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p0i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p1i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f16.p3i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p0i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p1i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.f32.p3i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.col.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p0i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p1i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.f16.p3i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p0i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p1i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.f32.p3i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p0i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p1i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f16.p3i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p0i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p1i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.f32.p3i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.load.c.row.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f16  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f16.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f16.satfinite  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f32  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f16.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f16.f32.satfinite  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f16  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f32.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f16.satfinite  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f32  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f32.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.f32.f32.satfinite  ->  wmma.mma.sync.aligned.col.col.m16n16k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.s8  ->  wmma.mma.sync.aligned.col.col.m16n16k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.s8.satfinite  ->  wmma.mma.sync.aligned.col.col.m16n16k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.u8  ->  wmma.mma.sync.aligned.col.col.m16n16k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.col.u8.satfinite  ->  wmma.mma.sync.aligned.col.col.m16n16k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f16  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f16.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f16.satfinite  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f32  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f16.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f16.f32.satfinite  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f16  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f32.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f16.satfinite  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f32  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f32.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.f32.f32.satfinite  ->  wmma.mma.sync.aligned.col.row.m16n16k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.s8  ->  wmma.mma.sync.aligned.col.row.m16n16k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.s8.satfinite  ->  wmma.mma.sync.aligned.col.row.m16n16k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.u8  ->  wmma.mma.sync.aligned.col.row.m16n16k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.col.row.u8.satfinite  ->  wmma.mma.sync.aligned.col.row.m16n16k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f16  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f16.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f16.satfinite  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f32  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f16.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f16.f32.satfinite  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f16  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f32.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f16.satfinite  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f32  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f32.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.f32.f32.satfinite  ->  wmma.mma.sync.aligned.row.col.m16n16k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.s8  ->  wmma.mma.sync.aligned.row.col.m16n16k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.s8.satfinite  ->  wmma.mma.sync.aligned.row.col.m16n16k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.u8  ->  wmma.mma.sync.aligned.row.col.m16n16k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.col.u8.satfinite  ->  wmma.mma.sync.aligned.row.col.m16n16k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f16.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f16.satfinite  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f32  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f16.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f16.f32.satfinite  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f16  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f32.f16 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f16.satfinite  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f32  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f32.f32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.f32.f32.satfinite  ->  wmma.mma.sync.aligned.row.row.m16n16k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.s8  ->  wmma.mma.sync.aligned.row.row.m16n16k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.s8.satfinite  ->  wmma.mma.sync.aligned.row.row.m16n16k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.u8  ->  wmma.mma.sync.aligned.row.row.m16n16k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m16n16k16.mma.row.row.u8.satfinite  ->  wmma.mma.sync.aligned.row.row.m16n16k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p0i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p1i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.f16.p3i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p0i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p1i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.f32.p3i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p0i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p1i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f16.p3i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p0i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p1i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.f32.p3i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.col.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p0i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p1i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.f16.p3i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p0i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p1i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.f32.p3i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p0i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p1i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.global.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f16.p3i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.shared.f16 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p0i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p1i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.global.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.f32.p3i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.shared.f32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.global.s32 
;  llvm.nvvm.wmma.m16n16k16.store.d.row.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m16n16k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p0i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p1i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.f16.p3i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p0i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p1i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.s8.p3i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p0i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p1i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.f16.p3i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p0i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p1i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.s8.p3i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p0i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p1i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.stride.u8.p3i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p0i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p1i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.col.u8.p3i8  ->  wmma.load.a.sync.aligned.col.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p0i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p1i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.f16.p3i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p0i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p1i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.s8.p3i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p0i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p1i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.f16.p3i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p0i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p1i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.s8.p3i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p0i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p1i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.stride.u8.p3i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p0i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p1i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.a.row.u8.p3i8  ->  wmma.load.a.sync.aligned.row.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p0i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p1i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.f16.p3i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p0i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p1i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.s8.p3i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p0i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p1i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.f16.p3i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p0i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p1i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.s8.p3i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p0i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p1i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.stride.u8.p3i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p0i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p1i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.col.u8.p3i8  ->  wmma.load.b.sync.aligned.col.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p0i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p1i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.f16.p3i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p0i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p1i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.s8.p3i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p0i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p1i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.f16.p3i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p0i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p1i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.global.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.s8.p3i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.shared.s8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p0i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p1i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.stride.u8.p3i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p0i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p1i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.global.u8 
;  llvm.nvvm.wmma.m32n8k16.load.b.row.u8.p3i8  ->  wmma.load.b.sync.aligned.row.m32n8k16.shared.u8 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p0i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p1i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.f16.p3i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p0i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p1i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.f32.p3i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p0i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p1i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f16.p3i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p0i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p1i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.f32.p3i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.col.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p0i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p1i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.f16.p3i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p0i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p1i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.f32.p3i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p0i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p1i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f16.p3i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p0i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p1i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.f32.p3i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.load.c.row.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f16  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f16.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f16.satfinite  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f32  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f16.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f16.f32.satfinite  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f16  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f32.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f16.satfinite  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f32  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f32.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.f32.f32.satfinite  ->  wmma.mma.sync.aligned.col.col.m32n8k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.s8  ->  wmma.mma.sync.aligned.col.col.m32n8k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.s8.satfinite  ->  wmma.mma.sync.aligned.col.col.m32n8k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.u8  ->  wmma.mma.sync.aligned.col.col.m32n8k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.col.u8.satfinite  ->  wmma.mma.sync.aligned.col.col.m32n8k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f16  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f16.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f16.satfinite  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f32  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f16.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f16.f32.satfinite  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f16  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f32.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f16.satfinite  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f32  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f32.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.f32.f32.satfinite  ->  wmma.mma.sync.aligned.col.row.m32n8k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.s8  ->  wmma.mma.sync.aligned.col.row.m32n8k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.s8.satfinite  ->  wmma.mma.sync.aligned.col.row.m32n8k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.u8  ->  wmma.mma.sync.aligned.col.row.m32n8k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.col.row.u8.satfinite  ->  wmma.mma.sync.aligned.col.row.m32n8k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f16  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f16.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f16.satfinite  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f32  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f16.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f16.f32.satfinite  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f16  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f32.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f16.satfinite  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f32  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f32.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.f32.f32.satfinite  ->  wmma.mma.sync.aligned.row.col.m32n8k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.s8  ->  wmma.mma.sync.aligned.row.col.m32n8k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.s8.satfinite  ->  wmma.mma.sync.aligned.row.col.m32n8k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.u8  ->  wmma.mma.sync.aligned.row.col.m32n8k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.col.u8.satfinite  ->  wmma.mma.sync.aligned.row.col.m32n8k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f16  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f16.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f16.satfinite  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f32  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f16.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f16.f32.satfinite  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f16  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f32.f16 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f16.satfinite  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f32  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f32.f32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.f32.f32.satfinite  ->  wmma.mma.sync.aligned.row.row.m32n8k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.s8  ->  wmma.mma.sync.aligned.row.row.m32n8k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.s8.satfinite  ->  wmma.mma.sync.aligned.row.row.m32n8k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.u8  ->  wmma.mma.sync.aligned.row.row.m32n8k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m32n8k16.mma.row.row.u8.satfinite  ->  wmma.mma.sync.aligned.row.row.m32n8k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p0i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p1i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.f16.p3i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p0i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p1i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.f32.p3i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p0i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p1i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f16.p3i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p0i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p1i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.f32.p3i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.col.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p0i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p1i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.f16.p3i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p0i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p1i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.f32.p3i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p0i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p1i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.global.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f16.p3i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.shared.f16 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p0i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p1i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.global.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.f32.p3i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.shared.f32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.global.s32 
;  llvm.nvvm.wmma.m32n8k16.store.d.row.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m32n8k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p0i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p1i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.f16.p3i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p0i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p1i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.s8.p3i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p0i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p1i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.f16.p3i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p0i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p1i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.s8.p3i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p0i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p1i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.stride.u8.p3i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p0i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p1i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.col.u8.p3i8  ->  wmma.load.a.sync.aligned.col.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p0i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p1i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.f16.p3i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p0i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p1i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.s8.p3i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p0i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p1i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.f16.p3i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p0i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p1i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.s8.p3i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p0i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p1i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.stride.u8.p3i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p0i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p1i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.a.row.u8.p3i8  ->  wmma.load.a.sync.aligned.row.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p0i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p1i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.f16.p3i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p0i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p1i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.s8.p3i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p0i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p1i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.f16.p3i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p0i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p1i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.s8.p3i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p0i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p1i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.stride.u8.p3i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p0i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p1i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.col.u8.p3i8  ->  wmma.load.b.sync.aligned.col.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p0i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p1i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.f16.p3i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p0i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p1i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.s8.p3i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p0i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p1i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.f16.p3i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p0i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p1i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.global.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.s8.p3i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.shared.s8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p0i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p1i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.stride.u8.p3i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p0i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p1i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.global.u8 
;  llvm.nvvm.wmma.m8n32k16.load.b.row.u8.p3i8  ->  wmma.load.b.sync.aligned.row.m8n32k16.shared.u8 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p0i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p1i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.f16.p3i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.f32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p0i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p1i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f16.p3i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.f32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.col.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p0i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p1i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.f16.p3i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.f32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p0i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p1i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f16.p3i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.f32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.load.c.row.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f16  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f16.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f16.satfinite  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f32  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f16.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f16.f32.satfinite  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f16  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f32.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f16.satfinite  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f32  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f32.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.f32.f32.satfinite  ->  wmma.mma.sync.aligned.col.col.m8n32k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.s8  ->  wmma.mma.sync.aligned.col.col.m8n32k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.s8.satfinite  ->  wmma.mma.sync.aligned.col.col.m8n32k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.u8  ->  wmma.mma.sync.aligned.col.col.m8n32k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.col.u8.satfinite  ->  wmma.mma.sync.aligned.col.col.m8n32k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f16  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f16.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f16.satfinite  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f32  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f16.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f16.f32.satfinite  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f16  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f32.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f16.satfinite  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f32  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f32.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.f32.f32.satfinite  ->  wmma.mma.sync.aligned.col.row.m8n32k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.s8  ->  wmma.mma.sync.aligned.col.row.m8n32k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.s8.satfinite  ->  wmma.mma.sync.aligned.col.row.m8n32k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.u8  ->  wmma.mma.sync.aligned.col.row.m8n32k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.col.row.u8.satfinite  ->  wmma.mma.sync.aligned.col.row.m8n32k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f16  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f16.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f16.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f32  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f16.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f16.f32.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f16  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f32.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f16.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f32  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f32.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.f32.f32.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n32k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.s8  ->  wmma.mma.sync.aligned.row.col.m8n32k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.s8.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n32k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.u8  ->  wmma.mma.sync.aligned.row.col.m8n32k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.col.u8.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n32k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f16  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f16.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f16.satfinite  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f16.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f32  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f16.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f16.f32.satfinite  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f16.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f16  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f32.f16 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f16.satfinite  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f32.f16.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f32  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f32.f32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.f32.f32.satfinite  ->  wmma.mma.sync.aligned.row.row.m8n32k16.f32.f32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.s8  ->  wmma.mma.sync.aligned.row.row.m8n32k16.s32.s8.s8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.s8.satfinite  ->  wmma.mma.sync.aligned.row.row.m8n32k16.s32.s8.s8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.u8  ->  wmma.mma.sync.aligned.row.row.m8n32k16.s32.u8.u8.s32 
;  llvm.nvvm.wmma.m8n32k16.mma.row.row.u8.satfinite  ->  wmma.mma.sync.aligned.row.row.m8n32k16.s32.u8.u8.s32.satfinite 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p0i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p1i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.f16.p3i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.f32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p0i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p1i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f16.p3i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.f32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.col.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p0i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p1i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.f16.p3i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.f32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p0i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p1i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.global.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f16.p3i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.shared.f16 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.global.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.f32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.shared.f32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.global.s32 
;  llvm.nvvm.wmma.m8n32k16.store.d.row.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n32k16.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p0i8  ->  wmma.load.a.sync.aligned.row.m8n8k128.b1 
;  llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p1i8  ->  wmma.load.a.sync.aligned.row.m8n8k128.global.b1 
;  llvm.nvvm.wmma.m8n8k128.load.a.row.b1.p3i8  ->  wmma.load.a.sync.aligned.row.m8n8k128.shared.b1 
;  llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p0i8  ->  wmma.load.a.sync.aligned.row.m8n8k128.b1 
;  llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p1i8  ->  wmma.load.a.sync.aligned.row.m8n8k128.global.b1 
;  llvm.nvvm.wmma.m8n8k128.load.a.row.stride.b1.p3i8  ->  wmma.load.a.sync.aligned.row.m8n8k128.shared.b1 
;  llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p0i8  ->  wmma.load.b.sync.aligned.col.m8n8k128.b1 
;  llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p1i8  ->  wmma.load.b.sync.aligned.col.m8n8k128.global.b1 
;  llvm.nvvm.wmma.m8n8k128.load.b.col.b1.p3i8  ->  wmma.load.b.sync.aligned.col.m8n8k128.shared.b1 
;  llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p0i8  ->  wmma.load.b.sync.aligned.col.m8n8k128.b1 
;  llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p1i8  ->  wmma.load.b.sync.aligned.col.m8n8k128.global.b1 
;  llvm.nvvm.wmma.m8n8k128.load.b.col.stride.b1.p3i8  ->  wmma.load.b.sync.aligned.col.m8n8k128.shared.b1 
;  llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.col.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.col.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.row.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.load.c.row.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.mma.row.col.b1  ->  wmma.mma.xor.popc.sync.aligned.row.col.m8n8k128.s32.b1.b1.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.col.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.col.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.row.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n8k128.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n8k128.global.s32 
;  llvm.nvvm.wmma.m8n8k128.store.d.row.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n8k128.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p0i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.s4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p1i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.global.s4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.s4.p3i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.shared.s4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p0i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.s4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p1i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.global.s4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.stride.s4.p3i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.shared.s4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p0i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.u4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p1i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.global.u4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.stride.u4.p3i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.shared.u4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p0i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.u4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p1i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.global.u4 
;  llvm.nvvm.wmma.m8n8k32.load.a.row.u4.p3i8  ->  wmma.load.a.sync.aligned.row.m8n8k32.shared.u4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p0i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.s4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p1i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.global.s4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.s4.p3i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.shared.s4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p0i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.s4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p1i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.global.s4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.stride.s4.p3i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.shared.s4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p0i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.u4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p1i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.global.u4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.stride.u4.p3i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.shared.u4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p0i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.u4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p1i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.global.u4 
;  llvm.nvvm.wmma.m8n8k32.load.b.col.u4.p3i8  ->  wmma.load.b.sync.aligned.col.m8n8k32.shared.u4 
;  llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.col.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n8k32.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.col.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.col.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.col.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.col.m8n8k32.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.row.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n8k32.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p0i8  ->  wmma.load.c.sync.aligned.row.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p1i8  ->  wmma.load.c.sync.aligned.row.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.load.c.row.stride.s32.p3i8  ->  wmma.load.c.sync.aligned.row.m8n8k32.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.mma.row.col.s4  ->  wmma.mma.sync.aligned.row.col.m8n8k32.s32.s4.s4.s32 
;  llvm.nvvm.wmma.m8n8k32.mma.row.col.s4.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n8k32.s32.s4.s4.s32.satfinite 
;  llvm.nvvm.wmma.m8n8k32.mma.row.col.u4  ->  wmma.mma.sync.aligned.row.col.m8n8k32.s32.u4.u4.s32 
;  llvm.nvvm.wmma.m8n8k32.mma.row.col.u4.satfinite  ->  wmma.mma.sync.aligned.row.col.m8n8k32.s32.u4.u4.s32.satfinite 
;  llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.col.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n8k32.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.col.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.col.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.col.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.col.m8n8k32.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.row.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n8k32.shared.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p0i8  ->  wmma.store.d.sync.aligned.row.m8n8k32.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p1i8  ->  wmma.store.d.sync.aligned.row.m8n8k32.global.s32 
;  llvm.nvvm.wmma.m8n8k32.store.d.row.stride.s32.p3i8  ->  wmma.store.d.sync.aligned.row.m8n8k32.shared.s32 
; INTRINSICS_LIST_END
; INTRINSICS: ; INTRINSICS_LIST_END
